
2019146037_TeamProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000011b6  0000124a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  008001ca  008001ca  00001314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002849  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097d  00000000  00000000  00003cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a8  00000000  00000000  00004656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00005700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071c  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002006  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000818a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	30 c3       	rjmp	.+1632   	; 0x666 <__vector_1>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c3       	rjmp	.+1906   	; 0x798 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 eb       	ldi	r30, 0xB6	; 182
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3c       	cpi	r26, 0xCA	; 202
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa ec       	ldi	r26, 0xCA	; 202
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3d       	cpi	r26, 0xD3	; 211
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ff d3       	rcall	.+2046   	; 0x8c2 <main>
      c4:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <PortInit>:
	unsigned char masterkey[] = "2019146037";
	unsigned char user_master[15];
	unsigned char star[] = "**************";
	LCD_pos(0,1); LCD_STR(str_mastermode);
	LCD_pos(1,1); LCD_STR(star);
}
      ca:	8f ef       	ldi	r24, 0xFF	; 255
      cc:	8a bb       	out	0x1a, r24	; 26
      ce:	8f e0       	ldi	r24, 0x0F	; 15
      d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
      d4:	08 95       	ret

000000d6 <LCD_Comm>:
      d6:	e5 e6       	ldi	r30, 0x65	; 101
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	90 81       	ld	r25, Z
      dc:	9b 7f       	andi	r25, 0xFB	; 251
      de:	90 83       	st	Z, r25
      e0:	90 81       	ld	r25, Z
      e2:	9d 7f       	andi	r25, 0xFD	; 253
      e4:	90 83       	st	Z, r25
      e6:	90 81       	ld	r25, Z
      e8:	91 60       	ori	r25, 0x01	; 1
      ea:	90 83       	st	Z, r25
      ec:	96 ef       	ldi	r25, 0xF6	; 246
      ee:	9a 95       	dec	r25
      f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Comm+0x18>
      f2:	8b bb       	out	0x1b, r24	; 27
      f4:	86 ef       	ldi	r24, 0xF6	; 246
      f6:	8a 95       	dec	r24
      f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Comm+0x20>
      fa:	80 81       	ld	r24, Z
      fc:	8e 7f       	andi	r24, 0xFE	; 254
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <LCD_Data>:
     102:	e5 e6       	ldi	r30, 0x65	; 101
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	94 60       	ori	r25, 0x04	; 4
     10a:	90 83       	st	Z, r25
     10c:	90 81       	ld	r25, Z
     10e:	9d 7f       	andi	r25, 0xFD	; 253
     110:	90 83       	st	Z, r25
     112:	90 81       	ld	r25, Z
     114:	91 60       	ori	r25, 0x01	; 1
     116:	90 83       	st	Z, r25
     118:	96 ef       	ldi	r25, 0xF6	; 246
     11a:	9a 95       	dec	r25
     11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_Data+0x18>
     11e:	8b bb       	out	0x1b, r24	; 27
     120:	86 ef       	ldi	r24, 0xF6	; 246
     122:	8a 95       	dec	r24
     124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Data+0x20>
     126:	80 81       	ld	r24, Z
     128:	8e 7f       	andi	r24, 0xFE	; 254
     12a:	80 83       	st	Z, r24
     12c:	08 95       	ret

0000012e <LCD_CHAR>:
     12e:	e9 df       	rcall	.-46     	; 0x102 <LCD_Data>
     130:	86 e6       	ldi	r24, 0x66	; 102
     132:	9e e0       	ldi	r25, 0x0E	; 14
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <LCD_CHAR+0x6>
     138:	00 00       	nop
     13a:	08 95       	ret

0000013c <LCD_STR>:
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	ec 01       	movw	r28, r24
     142:	02 c0       	rjmp	.+4      	; 0x148 <LCD_STR+0xc>
     144:	f4 df       	rcall	.-24     	; 0x12e <LCD_CHAR>
     146:	21 96       	adiw	r28, 0x01	; 1
     148:	88 81       	ld	r24, Y
     14a:	81 11       	cpse	r24, r1
     14c:	fb cf       	rjmp	.-10     	; 0x144 <LCD_STR+0x8>
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <LCD_pos>:
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	9b 01       	movw	r18, r22
     158:	40 e4       	ldi	r20, 0x40	; 64
     15a:	84 9f       	mul	r24, r20
     15c:	20 0d       	add	r18, r0
     15e:	31 1d       	adc	r19, r1
     160:	11 24       	eor	r1, r1
     162:	c9 01       	movw	r24, r18
     164:	80 68       	ori	r24, 0x80	; 128
     166:	b7 cf       	rjmp	.-146    	; 0xd6 <LCD_Comm>
     168:	08 95       	ret

0000016a <LCD_Clear>:
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	b3 df       	rcall	.-154    	; 0xd6 <LCD_Comm>
     170:	8c ec       	ldi	r24, 0xCC	; 204
     172:	9c e1       	ldi	r25, 0x1C	; 28
     174:	01 97       	sbiw	r24, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Clear+0xa>
     178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Clear+0x10>
     17a:	00 00       	nop
     17c:	08 95       	ret

0000017e <LCD_Init>:
     17e:	80 e3       	ldi	r24, 0x30	; 48
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	a9 df       	rcall	.-174    	; 0xd6 <LCD_Comm>
     184:	8a e0       	ldi	r24, 0x0A	; 10
     186:	9b e3       	ldi	r25, 0x3B	; 59
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0xa>
     18c:	80 e3       	ldi	r24, 0x30	; 48
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	a2 df       	rcall	.-188    	; 0xd6 <LCD_Comm>
     192:	80 e7       	ldi	r24, 0x70	; 112
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x18>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x1e>
     19c:	80 e3       	ldi	r24, 0x30	; 48
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	9a df       	rcall	.-204    	; 0xd6 <LCD_Comm>
     1a2:	80 e7       	ldi	r24, 0x70	; 112
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Init+0x28>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Init+0x2e>
     1ac:	88 e3       	ldi	r24, 0x38	; 56
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	92 df       	rcall	.-220    	; 0xd6 <LCD_Comm>
     1b2:	86 e6       	ldi	r24, 0x66	; 102
     1b4:	9e e0       	ldi	r25, 0x0E	; 14
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_Init+0x38>
     1ba:	00 00       	nop
     1bc:	8c e0       	ldi	r24, 0x0C	; 12
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	8a df       	rcall	.-236    	; 0xd6 <LCD_Comm>
     1c2:	86 e6       	ldi	r24, 0x66	; 102
     1c4:	9e e0       	ldi	r25, 0x0E	; 14
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Init+0x48>
     1ca:	00 00       	nop
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	82 df       	rcall	.-252    	; 0xd6 <LCD_Comm>
     1d2:	8c ec       	ldi	r24, 0xCC	; 204
     1d4:	9c e1       	ldi	r25, 0x1C	; 28
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Init+0x58>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Init+0x5e>
     1dc:	00 00       	nop
     1de:	86 e0       	ldi	r24, 0x06	; 6
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	79 df       	rcall	.-270    	; 0xd6 <LCD_Comm>
     1e4:	86 e6       	ldi	r24, 0x66	; 102
     1e6:	9e e0       	ldi	r25, 0x0E	; 14
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_Init+0x6a>
     1ec:	00 00       	nop
     1ee:	08 95       	ret

000001f0 <myDelay_us>:
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <myDelay_us+0x10>
     1f6:	45 e0       	ldi	r20, 0x05	; 5
     1f8:	4a 95       	dec	r20
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <myDelay_us+0x8>
     1fc:	2f 5f       	subi	r18, 0xFF	; 255
     1fe:	3f 4f       	sbci	r19, 0xFF	; 255
     200:	28 17       	cp	r18, r24
     202:	39 07       	cpc	r19, r25
     204:	c0 f3       	brcs	.-16     	; 0x1f6 <myDelay_us+0x6>
     206:	08 95       	ret

00000208 <SSound>:
     208:	cf 92       	push	r12
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	8c 01       	movw	r16, r24
     21a:	88 ea       	ldi	r24, 0xA8	; 168
     21c:	91 e6       	ldi	r25, 0x61	; 97
     21e:	b8 01       	movw	r22, r16
     220:	54 d7       	rcall	.+3752   	; 0x10ca <__divmodhi4>
     222:	7b 01       	movw	r14, r22
     224:	c1 2c       	mov	r12, r1
     226:	d1 2c       	mov	r13, r1
     228:	0f c0       	rjmp	.+30     	; 0x248 <SSound+0x40>
     22a:	c5 e6       	ldi	r28, 0x65	; 101
     22c:	d0 e0       	ldi	r29, 0x00	; 0
     22e:	88 81       	ld	r24, Y
     230:	80 61       	ori	r24, 0x10	; 16
     232:	88 83       	st	Y, r24
     234:	c8 01       	movw	r24, r16
     236:	dc df       	rcall	.-72     	; 0x1f0 <myDelay_us>
     238:	88 81       	ld	r24, Y
     23a:	8f 7e       	andi	r24, 0xEF	; 239
     23c:	88 83       	st	Y, r24
     23e:	c8 01       	movw	r24, r16
     240:	d7 df       	rcall	.-82     	; 0x1f0 <myDelay_us>
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	c8 1a       	sub	r12, r24
     246:	d8 0a       	sbc	r13, r24
     248:	ce 14       	cp	r12, r14
     24a:	df 04       	cpc	r13, r15
     24c:	74 f3       	brlt	.-36     	; 0x22a <SSound+0x22>
     24e:	e5 e6       	ldi	r30, 0x65	; 101
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 61       	ori	r24, 0x10	; 16
     256:	80 83       	st	Z, r24
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	df 90       	pop	r13
     266:	cf 90       	pop	r12
     268:	08 95       	ret

0000026a <TWO_SSound>:
     26a:	cf 92       	push	r12
     26c:	df 92       	push	r13
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	6c 01       	movw	r12, r24
     27c:	9c 01       	movw	r18, r24
     27e:	99 0f       	add	r25, r25
     280:	44 0b       	sbc	r20, r20
     282:	55 0b       	sbc	r21, r21
     284:	60 e5       	ldi	r22, 0x50	; 80
     286:	73 ec       	ldi	r23, 0xC3	; 195
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	31 d7       	rcall	.+3682   	; 0x10f0 <__divmodsi4>
     28e:	79 01       	movw	r14, r18
     290:	00 e0       	ldi	r16, 0x00	; 0
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	0e c0       	rjmp	.+28     	; 0x2b2 <TWO_SSound+0x48>
     296:	c5 e6       	ldi	r28, 0x65	; 101
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	88 81       	ld	r24, Y
     29c:	80 61       	ori	r24, 0x10	; 16
     29e:	88 83       	st	Y, r24
     2a0:	c6 01       	movw	r24, r12
     2a2:	a6 df       	rcall	.-180    	; 0x1f0 <myDelay_us>
     2a4:	88 81       	ld	r24, Y
     2a6:	8f 7e       	andi	r24, 0xEF	; 239
     2a8:	88 83       	st	Y, r24
     2aa:	c6 01       	movw	r24, r12
     2ac:	a1 df       	rcall	.-190    	; 0x1f0 <myDelay_us>
     2ae:	0f 5f       	subi	r16, 0xFF	; 255
     2b0:	1f 4f       	sbci	r17, 0xFF	; 255
     2b2:	0e 15       	cp	r16, r14
     2b4:	1f 05       	cpc	r17, r15
     2b6:	7c f3       	brlt	.-34     	; 0x296 <TWO_SSound+0x2c>
     2b8:	e5 e6       	ldi	r30, 0x65	; 101
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	80 61       	ori	r24, 0x10	; 16
     2c0:	80 83       	st	Z, r24
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	08 95       	ret

000002d4 <THREE_SSound>:
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	6c 01       	movw	r12, r24
     2e6:	9c 01       	movw	r18, r24
     2e8:	99 0f       	add	r25, r25
     2ea:	44 0b       	sbc	r20, r20
     2ec:	55 0b       	sbc	r21, r21
     2ee:	60 e9       	ldi	r22, 0x90	; 144
     2f0:	70 ed       	ldi	r23, 0xD0	; 208
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fc d6       	rcall	.+3576   	; 0x10f0 <__divmodsi4>
     2f8:	79 01       	movw	r14, r18
     2fa:	00 e0       	ldi	r16, 0x00	; 0
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	0e c0       	rjmp	.+28     	; 0x31c <THREE_SSound+0x48>
     300:	c5 e6       	ldi	r28, 0x65	; 101
     302:	d0 e0       	ldi	r29, 0x00	; 0
     304:	88 81       	ld	r24, Y
     306:	80 61       	ori	r24, 0x10	; 16
     308:	88 83       	st	Y, r24
     30a:	c6 01       	movw	r24, r12
     30c:	71 df       	rcall	.-286    	; 0x1f0 <myDelay_us>
     30e:	88 81       	ld	r24, Y
     310:	8f 7e       	andi	r24, 0xEF	; 239
     312:	88 83       	st	Y, r24
     314:	c6 01       	movw	r24, r12
     316:	6c df       	rcall	.-296    	; 0x1f0 <myDelay_us>
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	0e 15       	cp	r16, r14
     31e:	1f 05       	cpc	r17, r15
     320:	7c f3       	brlt	.-34     	; 0x300 <THREE_SSound+0x2c>
     322:	e5 e6       	ldi	r30, 0x65	; 101
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	80 61       	ori	r24, 0x10	; 16
     32a:	80 83       	st	Z, r24
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <gen_sound>:
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	91 05       	cpc	r25, r1
     342:	69 f4       	brne	.+26     	; 0x35e <gen_sound+0x20>
     344:	84 e7       	ldi	r24, 0x74	; 116
     346:	97 e0       	ldi	r25, 0x07	; 7
     348:	5f df       	rcall	.-322    	; 0x208 <SSound>
     34a:	2f ef       	ldi	r18, 0xFF	; 255
     34c:	8f e7       	ldi	r24, 0x7F	; 127
     34e:	96 e1       	ldi	r25, 0x16	; 22
     350:	21 50       	subi	r18, 0x01	; 1
     352:	80 40       	sbci	r24, 0x00	; 0
     354:	90 40       	sbci	r25, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <gen_sound+0x12>
     358:	00 c0       	rjmp	.+0      	; 0x35a <gen_sound+0x1c>
     35a:	00 00       	nop
     35c:	08 95       	ret
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	91 05       	cpc	r25, r1
     362:	69 f4       	brne	.+26     	; 0x37e <gen_sound+0x40>
     364:	84 ea       	ldi	r24, 0xA4	; 164
     366:	96 e0       	ldi	r25, 0x06	; 6
     368:	4f df       	rcall	.-354    	; 0x208 <SSound>
     36a:	2f ef       	ldi	r18, 0xFF	; 255
     36c:	8f e7       	ldi	r24, 0x7F	; 127
     36e:	96 e1       	ldi	r25, 0x16	; 22
     370:	21 50       	subi	r18, 0x01	; 1
     372:	80 40       	sbci	r24, 0x00	; 0
     374:	90 40       	sbci	r25, 0x00	; 0
     376:	e1 f7       	brne	.-8      	; 0x370 <gen_sound+0x32>
     378:	00 c0       	rjmp	.+0      	; 0x37a <gen_sound+0x3c>
     37a:	00 00       	nop
     37c:	08 95       	ret
     37e:	83 30       	cpi	r24, 0x03	; 3
     380:	91 05       	cpc	r25, r1
     382:	69 f4       	brne	.+26     	; 0x39e <gen_sound+0x60>
     384:	8b ee       	ldi	r24, 0xEB	; 235
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	3f df       	rcall	.-386    	; 0x208 <SSound>
     38a:	2f ef       	ldi	r18, 0xFF	; 255
     38c:	8f e7       	ldi	r24, 0x7F	; 127
     38e:	96 e1       	ldi	r25, 0x16	; 22
     390:	21 50       	subi	r18, 0x01	; 1
     392:	80 40       	sbci	r24, 0x00	; 0
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <gen_sound+0x52>
     398:	00 c0       	rjmp	.+0      	; 0x39a <gen_sound+0x5c>
     39a:	00 00       	nop
     39c:	08 95       	ret
     39e:	84 30       	cpi	r24, 0x04	; 4
     3a0:	91 05       	cpc	r25, r1
     3a2:	69 f4       	brne	.+26     	; 0x3be <gen_sound+0x80>
     3a4:	87 ef       	ldi	r24, 0xF7	; 247
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	2f df       	rcall	.-418    	; 0x208 <SSound>
     3aa:	2f ef       	ldi	r18, 0xFF	; 255
     3ac:	8f e7       	ldi	r24, 0x7F	; 127
     3ae:	96 e1       	ldi	r25, 0x16	; 22
     3b0:	21 50       	subi	r18, 0x01	; 1
     3b2:	80 40       	sbci	r24, 0x00	; 0
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <gen_sound+0x72>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <gen_sound+0x7c>
     3ba:	00 00       	nop
     3bc:	08 95       	ret
     3be:	85 30       	cpi	r24, 0x05	; 5
     3c0:	91 05       	cpc	r25, r1
     3c2:	69 f4       	brne	.+26     	; 0x3de <gen_sound+0xa0>
     3c4:	88 e9       	ldi	r24, 0x98	; 152
     3c6:	95 e0       	ldi	r25, 0x05	; 5
     3c8:	1f df       	rcall	.-450    	; 0x208 <SSound>
     3ca:	2f ef       	ldi	r18, 0xFF	; 255
     3cc:	8f e7       	ldi	r24, 0x7F	; 127
     3ce:	96 e1       	ldi	r25, 0x16	; 22
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <gen_sound+0x92>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <gen_sound+0x9c>
     3da:	00 00       	nop
     3dc:	08 95       	ret
     3de:	86 30       	cpi	r24, 0x06	; 6
     3e0:	91 05       	cpc	r25, r1
     3e2:	69 f4       	brne	.+26     	; 0x3fe <gen_sound+0xc0>
     3e4:	8b ef       	ldi	r24, 0xFB	; 251
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	0f df       	rcall	.-482    	; 0x208 <SSound>
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	8f e7       	ldi	r24, 0x7F	; 127
     3ee:	96 e1       	ldi	r25, 0x16	; 22
     3f0:	21 50       	subi	r18, 0x01	; 1
     3f2:	80 40       	sbci	r24, 0x00	; 0
     3f4:	90 40       	sbci	r25, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <gen_sound+0xb2>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <gen_sound+0xbc>
     3fa:	00 00       	nop
     3fc:	08 95       	ret
     3fe:	87 30       	cpi	r24, 0x07	; 7
     400:	91 05       	cpc	r25, r1
     402:	69 f4       	brne	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     404:	80 e7       	ldi	r24, 0x70	; 112
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	ff de       	rcall	.-514    	; 0x208 <SSound>
     40a:	2f ef       	ldi	r18, 0xFF	; 255
     40c:	8f e7       	ldi	r24, 0x7F	; 127
     40e:	96 e1       	ldi	r25, 0x16	; 22
     410:	21 50       	subi	r18, 0x01	; 1
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	08 95       	ret
     41e:	88 30       	cpi	r24, 0x08	; 8
     420:	91 05       	cpc	r25, r1
     422:	69 f4       	brne	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     424:	87 ef       	ldi	r24, 0xF7	; 247
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	ef de       	rcall	.-546    	; 0x208 <SSound>
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	8f e7       	ldi	r24, 0x7F	; 127
     42e:	96 e1       	ldi	r25, 0x16	; 22
     430:	21 50       	subi	r18, 0x01	; 1
     432:	80 40       	sbci	r24, 0x00	; 0
     434:	90 40       	sbci	r25, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43a:	00 00       	nop
     43c:	08 95       	ret
     43e:	89 30       	cpi	r24, 0x09	; 9
     440:	91 05       	cpc	r25, r1
     442:	69 f4       	brne	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     444:	84 ef       	ldi	r24, 0xF4	; 244
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	df de       	rcall	.-578    	; 0x208 <SSound>
     44a:	2f ef       	ldi	r18, 0xFF	; 255
     44c:	8f e7       	ldi	r24, 0x7F	; 127
     44e:	96 e1       	ldi	r25, 0x16	; 22
     450:	21 50       	subi	r18, 0x01	; 1
     452:	80 40       	sbci	r24, 0x00	; 0
     454:	90 40       	sbci	r25, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     45a:	00 00       	nop
     45c:	08 95       	ret
     45e:	8a 30       	cpi	r24, 0x0A	; 10
     460:	91 05       	cpc	r25, r1
     462:	69 f4       	brne	.+26     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     464:	8c eb       	ldi	r24, 0xBC	; 188
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	cf de       	rcall	.-610    	; 0x208 <SSound>
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	8f e7       	ldi	r24, 0x7F	; 127
     46e:	96 e1       	ldi	r25, 0x16	; 22
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
     47c:	08 95       	ret
     47e:	8b 30       	cpi	r24, 0x0B	; 11
     480:	91 05       	cpc	r25, r1
     482:	69 f4       	brne	.+26     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     484:	84 e5       	ldi	r24, 0x54	; 84
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	bf de       	rcall	.-642    	; 0x208 <SSound>
     48a:	2f ef       	ldi	r18, 0xFF	; 255
     48c:	8f e7       	ldi	r24, 0x7F	; 127
     48e:	96 e1       	ldi	r25, 0x16	; 22
     490:	21 50       	subi	r18, 0x01	; 1
     492:	80 40       	sbci	r24, 0x00	; 0
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	e1 f7       	brne	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     498:	00 c0       	rjmp	.+0      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     49a:	00 00       	nop
     49c:	08 95       	ret
     49e:	8c 30       	cpi	r24, 0x0C	; 12
     4a0:	91 05       	cpc	r25, r1
     4a2:	69 f4       	brne	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4a4:	87 ef       	ldi	r24, 0xF7	; 247
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	af de       	rcall	.-674    	; 0x208 <SSound>
     4aa:	2f ef       	ldi	r18, 0xFF	; 255
     4ac:	8f e7       	ldi	r24, 0x7F	; 127
     4ae:	96 e1       	ldi	r25, 0x16	; 22
     4b0:	21 50       	subi	r18, 0x01	; 1
     4b2:	80 40       	sbci	r24, 0x00	; 0
     4b4:	90 40       	sbci	r25, 0x00	; 0
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4ba:	00 00       	nop
     4bc:	08 95       	ret
     4be:	8d 30       	cpi	r24, 0x0D	; 13
     4c0:	91 05       	cpc	r25, r1
     4c2:	69 f4       	brne	.+26     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4c4:	87 ef       	ldi	r24, 0xF7	; 247
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	9f de       	rcall	.-706    	; 0x208 <SSound>
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
     4cc:	8f e7       	ldi	r24, 0x7F	; 127
     4ce:	96 e1       	ldi	r25, 0x16	; 22
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	80 40       	sbci	r24, 0x00	; 0
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4da:	00 00       	nop
     4dc:	08 95       	ret
     4de:	8e 30       	cpi	r24, 0x0E	; 14
     4e0:	91 05       	cpc	r25, r1
     4e2:	69 f4       	brne	.+26     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4e4:	87 ef       	ldi	r24, 0xF7	; 247
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	8f de       	rcall	.-738    	; 0x208 <SSound>
     4ea:	2f ef       	ldi	r18, 0xFF	; 255
     4ec:	8f e7       	ldi	r24, 0x7F	; 127
     4ee:	96 e1       	ldi	r25, 0x16	; 22
     4f0:	21 50       	subi	r18, 0x01	; 1
     4f2:	80 40       	sbci	r24, 0x00	; 0
     4f4:	90 40       	sbci	r25, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4fa:	00 00       	nop
     4fc:	08 95       	ret
     4fe:	8f 30       	cpi	r24, 0x0F	; 15
     500:	91 05       	cpc	r25, r1
     502:	69 f4       	brne	.+26     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     504:	87 ef       	ldi	r24, 0xF7	; 247
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	7f de       	rcall	.-770    	; 0x208 <SSound>
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	8f e7       	ldi	r24, 0x7F	; 127
     50e:	96 e1       	ldi	r25, 0x16	; 22
     510:	21 50       	subi	r18, 0x01	; 1
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     51a:	00 00       	nop
     51c:	08 95       	ret
     51e:	40 97       	sbiw	r24, 0x10	; 16
     520:	61 f4       	brne	.+24     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     522:	87 ef       	ldi	r24, 0xF7	; 247
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	70 de       	rcall	.-800    	; 0x208 <SSound>
     528:	2f ef       	ldi	r18, 0xFF	; 255
     52a:	8f e7       	ldi	r24, 0x7F	; 127
     52c:	96 e1       	ldi	r25, 0x16	; 22
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	80 40       	sbci	r24, 0x00	; 0
     532:	90 40       	sbci	r25, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     536:	00 c0       	rjmp	.+0      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     538:	00 00       	nop
     53a:	08 95       	ret

0000053c <PORT_Init>:
     53c:	e4 e6       	ldi	r30, 0x64	; 100
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 61       	ori	r24, 0x10	; 16
     544:	80 83       	st	Z, r24
     546:	e5 e6       	ldi	r30, 0x65	; 101
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	80 61       	ori	r24, 0x10	; 16
     54e:	80 83       	st	Z, r24
     550:	80 ef       	ldi	r24, 0xF0	; 240
     552:	82 b9       	out	0x02, r24	; 2
     554:	9f ef       	ldi	r25, 0xFF	; 255
     556:	97 bb       	out	0x17, r25	; 23
     558:	84 bb       	out	0x14, r24	; 20
     55a:	08 95       	ret

0000055c <FND_Disp>:
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	8c 01       	movw	r16, r24
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	80 81       	ld	r24, Z
     56c:	83 b9       	out	0x03, r24	; 3
     56e:	c8 01       	movw	r24, r16
     570:	68 ee       	ldi	r22, 0xE8	; 232
     572:	73 e0       	ldi	r23, 0x03	; 3
     574:	aa d5       	rcall	.+2900   	; 0x10ca <__divmodhi4>
     576:	cb 01       	movw	r24, r22
     578:	ca e0       	ldi	r28, 0x0A	; 10
     57a:	d0 e0       	ldi	r29, 0x00	; 0
     57c:	be 01       	movw	r22, r28
     57e:	a5 d5       	rcall	.+2890   	; 0x10ca <__divmodhi4>
     580:	dc 01       	movw	r26, r24
     582:	a8 5f       	subi	r26, 0xF8	; 248
     584:	be 4f       	sbci	r27, 0xFE	; 254
     586:	8c 91       	ld	r24, X
     588:	88 bb       	out	0x18, r24	; 24
     58a:	86 e6       	ldi	r24, 0x66	; 102
     58c:	9e e0       	ldi	r25, 0x0E	; 14
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <FND_Disp+0x32>
     592:	00 00       	nop
     594:	2f ef       	ldi	r18, 0xFF	; 255
     596:	28 bb       	out	0x18, r18	; 24
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	83 b9       	out	0x03, r24	; 3
     59c:	c8 01       	movw	r24, r16
     59e:	64 e6       	ldi	r22, 0x64	; 100
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	93 d5       	rcall	.+2854   	; 0x10ca <__divmodhi4>
     5a4:	cb 01       	movw	r24, r22
     5a6:	be 01       	movw	r22, r28
     5a8:	90 d5       	rcall	.+2848   	; 0x10ca <__divmodhi4>
     5aa:	dc 01       	movw	r26, r24
     5ac:	a8 5f       	subi	r26, 0xF8	; 248
     5ae:	be 4f       	sbci	r27, 0xFE	; 254
     5b0:	8c 91       	ld	r24, X
     5b2:	88 bb       	out	0x18, r24	; 24
     5b4:	86 e6       	ldi	r24, 0x66	; 102
     5b6:	9e e0       	ldi	r25, 0x0E	; 14
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <FND_Disp+0x5c>
     5bc:	00 00       	nop
     5be:	28 bb       	out	0x18, r18	; 24
     5c0:	84 81       	ldd	r24, Z+4	; 0x04
     5c2:	83 b9       	out	0x03, r24	; 3
     5c4:	c8 01       	movw	r24, r16
     5c6:	be 01       	movw	r22, r28
     5c8:	80 d5       	rcall	.+2816   	; 0x10ca <__divmodhi4>
     5ca:	8c 01       	movw	r16, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	be 01       	movw	r22, r28
     5d0:	7c d5       	rcall	.+2808   	; 0x10ca <__divmodhi4>
     5d2:	dc 01       	movw	r26, r24
     5d4:	a8 5f       	subi	r26, 0xF8	; 248
     5d6:	be 4f       	sbci	r27, 0xFE	; 254
     5d8:	8c 91       	ld	r24, X
     5da:	88 bb       	out	0x18, r24	; 24
     5dc:	86 e6       	ldi	r24, 0x66	; 102
     5de:	9e e0       	ldi	r25, 0x0E	; 14
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <FND_Disp+0x84>
     5e4:	00 00       	nop
     5e6:	28 bb       	out	0x18, r18	; 24
     5e8:	86 81       	ldd	r24, Z+6	; 0x06
     5ea:	83 b9       	out	0x03, r24	; 3
     5ec:	f8 01       	movw	r30, r16
     5ee:	e8 5f       	subi	r30, 0xF8	; 248
     5f0:	fe 4f       	sbci	r31, 0xFE	; 254
     5f2:	80 81       	ld	r24, Z
     5f4:	88 bb       	out	0x18, r24	; 24
     5f6:	86 e6       	ldi	r24, 0x66	; 102
     5f8:	9e e0       	ldi	r25, 0x0E	; 14
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <FND_Disp+0x9e>
     5fe:	00 00       	nop
     600:	28 bb       	out	0x18, r18	; 24
     602:	13 b8       	out	0x03, r1	; 3
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret

0000060e <getNum>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	60 97       	sbiw	r28, 0x10	; 16
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	90 e1       	ldi	r25, 0x10	; 16
     624:	e8 e1       	ldi	r30, 0x18	; 24
     626:	f1 e0       	ldi	r31, 0x01	; 1
     628:	de 01       	movw	r26, r28
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	01 90       	ld	r0, Z+
     62e:	0d 92       	st	X+, r0
     630:	9a 95       	dec	r25
     632:	e1 f7       	brne	.-8      	; 0x62c <getNum+0x1e>
     634:	81 31       	cpi	r24, 0x11	; 17
     636:	60 f4       	brcc	.+24     	; 0x650 <getNum+0x42>
     638:	e8 2f       	mov	r30, r24
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	8c 0f       	add	r24, r28
     644:	9d 1f       	adc	r25, r29
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	80 81       	ld	r24, Z
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	02 c0       	rjmp	.+4      	; 0x654 <getNum+0x46>
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	9f ef       	ldi	r25, 0xFF	; 255
     654:	60 96       	adiw	r28, 0x10	; 16
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <__vector_1>:
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	0b b6       	in	r0, 0x3b	; 59
     672:	0f 92       	push	r0
     674:	2f 93       	push	r18
     676:	3f 93       	push	r19
     678:	4f 93       	push	r20
     67a:	5f 93       	push	r21
     67c:	6f 93       	push	r22
     67e:	7f 93       	push	r23
     680:	8f 93       	push	r24
     682:	9f 93       	push	r25
     684:	af 93       	push	r26
     686:	bf 93       	push	r27
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	a6 97       	sbiw	r28, 0x26	; 38
     696:	de bf       	out	0x3e, r29	; 62
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	8d e0       	ldi	r24, 0x0D	; 13
     69c:	e6 e4       	ldi	r30, 0x46	; 70
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	de 01       	movw	r26, r28
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <__vector_1+0x3e>
     6ac:	8f e0       	ldi	r24, 0x0F	; 15
     6ae:	e3 e5       	ldi	r30, 0x53	; 83
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	de 01       	movw	r26, r28
     6b4:	1e 96       	adiw	r26, 0x0e	; 14
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <__vector_1+0x50>
     6be:	8a e0       	ldi	r24, 0x0A	; 10
     6c0:	e2 e6       	ldi	r30, 0x62	; 98
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	de 01       	movw	r26, r28
     6c6:	5d 96       	adiw	r26, 0x1d	; 29
     6c8:	01 90       	ld	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	8a 95       	dec	r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <__vector_1+0x62>
     6d0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <Count>
     6d4:	81 11       	cpse	r24, r1
     6d6:	13 c0       	rjmp	.+38     	; 0x6fe <__vector_1+0x98>
     6d8:	48 dd       	rcall	.-1392   	; 0x16a <LCD_Clear>
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	3a dd       	rcall	.-1420   	; 0x154 <LCD_pos>
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	2b dd       	rcall	.-1450   	; 0x13c <LCD_STR>
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	34 dd       	rcall	.-1432   	; 0x154 <LCD_pos>
     6ec:	ce 01       	movw	r24, r28
     6ee:	0e 96       	adiw	r24, 0x0e	; 14
     6f0:	25 dd       	rcall	.-1462   	; 0x13c <LCD_STR>
     6f2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <Count>
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Count>
     6fc:	2a c0       	rjmp	.+84     	; 0x752 <__vector_1+0xec>
     6fe:	35 dd       	rcall	.-1430   	; 0x16a <LCD_Clear>
     700:	84 e7       	ldi	r24, 0x74	; 116
     702:	97 e0       	ldi	r25, 0x07	; 7
     704:	81 dd       	rcall	.-1278   	; 0x208 <SSound>
     706:	2f ef       	ldi	r18, 0xFF	; 255
     708:	8f e7       	ldi	r24, 0x7F	; 127
     70a:	96 e1       	ldi	r25, 0x16	; 22
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	90 40       	sbci	r25, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <__vector_1+0xa6>
     714:	00 c0       	rjmp	.+0      	; 0x716 <__vector_1+0xb0>
     716:	00 00       	nop
     718:	84 ea       	ldi	r24, 0xA4	; 164
     71a:	96 e0       	ldi	r25, 0x06	; 6
     71c:	75 dd       	rcall	.-1302   	; 0x208 <SSound>
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	8f e7       	ldi	r24, 0x7F	; 127
     722:	96 e1       	ldi	r25, 0x16	; 22
     724:	21 50       	subi	r18, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <__vector_1+0xbe>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <__vector_1+0xc8>
     72e:	00 00       	nop
     730:	8b ee       	ldi	r24, 0xEB	; 235
     732:	95 e0       	ldi	r25, 0x05	; 5
     734:	69 dd       	rcall	.-1326   	; 0x208 <SSound>
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0c dd       	rcall	.-1512   	; 0x154 <LCD_pos>
     73c:	ce 01       	movw	r24, r28
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	fd dc       	rcall	.-1542   	; 0x13c <LCD_STR>
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	06 dd       	rcall	.-1524   	; 0x154 <LCD_pos>
     748:	ce 01       	movw	r24, r28
     74a:	4d 96       	adiw	r24, 0x1d	; 29
     74c:	f7 dc       	rcall	.-1554   	; 0x13c <LCD_STR>
     74e:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <Count>
     752:	a6 96       	adiw	r28, 0x26	; 38
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0b be       	out	0x3b, r0	; 59
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <interrupt_init>:
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	89 bf       	out	0x39, r24	; 57
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
     792:	11 ba       	out	0x11, r1	; 17
     794:	78 94       	sei
     796:	08 95       	ret

00000798 <__vector_9>:
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	0b b6       	in	r0, 0x3b	; 59
     7a4:	0f 92       	push	r0
     7a6:	2f 93       	push	r18
     7a8:	3f 93       	push	r19
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
     7b2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <T2_CYCLE_TIME_CNT_us>
     7b6:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <T2_CYCLE_TIME_CNT_us+0x1>
     7ba:	8c 59       	subi	r24, 0x9C	; 156
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <T2_CYCLE_TIME_CNT_us+0x1>
     7c2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <T2_CYCLE_TIME_CNT_us>
     7c6:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     7ca:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     7ce:	8c 59       	subi	r24, 0x9C	; 156
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     7d6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
     7da:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <T2_DUTY_TIME_us>
     7de:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <T2_DUTY_TIME_us+0x1>
     7e2:	28 17       	cp	r18, r24
     7e4:	39 07       	cpc	r19, r25
     7e6:	30 f0       	brcs	.+12     	; 0x7f4 <__vector_9+0x5c>
     7e8:	e2 e6       	ldi	r30, 0x62	; 98
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	80 83       	st	Z, r24
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <__vector_9+0x66>
     7f4:	e2 e6       	ldi	r30, 0x62	; 98
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	87 7f       	andi	r24, 0xF7	; 247
     7fc:	80 83       	st	Z, r24
     7fe:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <T2_CYCLE_TIME_CNT_us>
     802:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <T2_CYCLE_TIME_CNT_us+0x1>
     806:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <T2_CYCLE_TIME_us>
     80a:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <T2_CYCLE_TIME_us+0x1>
     80e:	28 17       	cp	r18, r24
     810:	39 07       	cpc	r19, r25
     812:	41 f4       	brne	.+16     	; 0x824 <__vector_9+0x8c>
     814:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <T2_CYCLE_TIME_CNT_us+0x1>
     818:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <T2_CYCLE_TIME_CNT_us>
     81c:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <__data_end+0x1>
     820:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
     824:	ff 91       	pop	r31
     826:	ef 91       	pop	r30
     828:	9f 91       	pop	r25
     82a:	8f 91       	pop	r24
     82c:	3f 91       	pop	r19
     82e:	2f 91       	pop	r18
     830:	0f 90       	pop	r0
     832:	0b be       	out	0x3b, r0	; 59
     834:	0f 90       	pop	r0
     836:	0f be       	out	0x3f, r0	; 63
     838:	0f 90       	pop	r0
     83a:	1f 90       	pop	r1
     83c:	18 95       	reti

0000083e <Init_Timer2>:
     83e:	87 b7       	in	r24, 0x37	; 55
     840:	80 68       	ori	r24, 0x80	; 128
     842:	87 bf       	out	0x37, r24	; 55
     844:	8a e0       	ldi	r24, 0x0A	; 10
     846:	85 bd       	out	0x25, r24	; 37
     848:	88 eb       	ldi	r24, 0xB8	; 184
     84a:	83 bd       	out	0x23, r24	; 35
     84c:	08 95       	ret

0000084e <Init_TimerINT>:
     84e:	f7 df       	rcall	.-18     	; 0x83e <Init_Timer2>
     850:	8f b7       	in	r24, 0x3f	; 63
     852:	80 68       	ori	r24, 0x80	; 128
     854:	8f bf       	out	0x3f, r24	; 63
     856:	08 95       	ret

00000858 <SetServoDeg>:
     858:	48 ec       	ldi	r20, 0xC8	; 200
     85a:	48 9f       	mul	r20, r24
     85c:	90 01       	movw	r18, r0
     85e:	49 9f       	mul	r20, r25
     860:	30 0d       	add	r19, r0
     862:	11 24       	eor	r1, r1
     864:	af e8       	ldi	r26, 0x8F	; 143
     866:	b3 ee       	ldi	r27, 0xE3	; 227
     868:	5f d4       	rcall	.+2238   	; 0x1128 <__umulhisi3>
     86a:	92 95       	swap	r25
     86c:	82 95       	swap	r24
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	89 27       	eor	r24, r25
     872:	9f 70       	andi	r25, 0x0F	; 15
     874:	89 27       	eor	r24, r25
     876:	8c 50       	subi	r24, 0x0C	; 12
     878:	9e 4f       	sbci	r25, 0xFE	; 254
     87a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <T2_DUTY_TIME_us+0x1>
     87e:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <T2_DUTY_TIME_us>
     882:	08 95       	ret

00000884 <PORT_TIMER_Init>:
     884:	e1 e6       	ldi	r30, 0x61	; 97
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	88 60       	ori	r24, 0x08	; 8
     88c:	80 83       	st	Z, r24
     88e:	08 95       	ret

00000890 <Siren>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	c4 ea       	ldi	r28, 0xA4	; 164
     896:	d6 e0       	ldi	r29, 0x06	; 6
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <Siren+0x10>
     89a:	ce 01       	movw	r24, r28
     89c:	b5 dc       	rcall	.-1686   	; 0x208 <SSound>
     89e:	2b 97       	sbiw	r28, 0x0b	; 11
     8a0:	ce 37       	cpi	r28, 0x7E	; 126
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	d8 07       	cpc	r29, r24
     8a6:	cc f7       	brge	.-14     	; 0x89a <Siren+0xa>
     8a8:	ce e7       	ldi	r28, 0x7E	; 126
     8aa:	d2 e0       	ldi	r29, 0x02	; 2
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <Siren+0x24>
     8ae:	ce 01       	movw	r24, r28
     8b0:	ab dc       	rcall	.-1706   	; 0x208 <SSound>
     8b2:	65 96       	adiw	r28, 0x15	; 21
     8b4:	c5 3a       	cpi	r28, 0xA5	; 165
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	d8 07       	cpc	r29, r24
     8ba:	cc f3       	brlt	.-14     	; 0x8ae <Siren+0x1e>
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <main>:

//마스터키 함수
void main(){
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	c2 57       	subi	r28, 0x72	; 114
     8cc:	d1 09       	sbc	r29, r1
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
	int fnd_value = 0;
	unsigned int state = 0;
	unsigned char col;
	
	unsigned int sw;
	unsigned char str_password[] = "PASSWORD";
     8d8:	89 e0       	ldi	r24, 0x09	; 9
     8da:	e0 ea       	ldi	r30, 0xA0	; 160
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	de 01       	movw	r26, r28
     8e0:	11 96       	adiw	r26, 0x01	; 1
     8e2:	01 90       	ld	r0, Z+
     8e4:	0d 92       	st	X+, r0
     8e6:	8a 95       	dec	r24
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <main+0x20>
	unsigned char number[]  = "**************";
     8ea:	8f e0       	ldi	r24, 0x0F	; 15
     8ec:	e1 e9       	ldi	r30, 0x91	; 145
     8ee:	f1 e0       	ldi	r31, 0x01	; 1
     8f0:	de 01       	movw	r26, r28
     8f2:	1a 96       	adiw	r26, 0x0a	; 10
     8f4:	01 90       	ld	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	8a 95       	dec	r24
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <main+0x32>
	unsigned char str_dooropen[] = "DOOR OPEN";
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
     8fe:	e9 ea       	ldi	r30, 0xA9	; 169
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	de 01       	movw	r26, r28
     904:	59 96       	adiw	r26, 0x19	; 25
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	8a 95       	dec	r24
     90c:	e1 f7       	brne	.-8      	; 0x906 <main+0x44>
	unsigned char str_error[] = "error.......";
     90e:	8d e0       	ldi	r24, 0x0D	; 13
     910:	e3 eb       	ldi	r30, 0xB3	; 179
     912:	f1 e0       	ldi	r31, 0x01	; 1
     914:	de 01       	movw	r26, r28
     916:	93 96       	adiw	r26, 0x23	; 35
     918:	01 90       	ld	r0, Z+
     91a:	0d 92       	st	X+, r0
     91c:	8a 95       	dec	r24
     91e:	e1 f7       	brne	.-8      	; 0x918 <main+0x56>
	unsigned char str_warning[] = "warning.....";
     920:	8d e0       	ldi	r24, 0x0D	; 13
     922:	ec e6       	ldi	r30, 0x6C	; 108
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	de 01       	movw	r26, r28
     928:	d0 96       	adiw	r26, 0x30	; 48
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	8a 95       	dec	r24
     930:	e1 f7       	brne	.-8      	; 0x92a <main+0x68>
	unsigned char str_theft[] = "if,theft";
     932:	89 e0       	ldi	r24, 0x09	; 9
     934:	e0 ec       	ldi	r30, 0xC0	; 192
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	de 01       	movw	r26, r28
     93a:	dd 96       	adiw	r26, 0x3d	; 61
     93c:	01 90       	ld	r0, Z+
     93e:	0d 92       	st	X+, r0
     940:	8a 95       	dec	r24
     942:	e1 f7       	brne	.-8      	; 0x93c <main+0x7a>
	
	unsigned int  position = 1;
	
	unsigned char user_password[15] = {1,2,3,4,5,6,7,8,9,0,10,10,10,10,10};
     944:	8f e0       	ldi	r24, 0x0F	; 15
     946:	e8 e2       	ldi	r30, 0x28	; 40
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	de 01       	movw	r26, r28
     94c:	aa 5b       	subi	r26, 0xBA	; 186
     94e:	bf 4f       	sbci	r27, 0xFF	; 255
     950:	01 90       	ld	r0, Z+
     952:	0d 92       	st	X+, r0
     954:	8a 95       	dec	r24
     956:	e1 f7       	brne	.-8      	; 0x950 <main+0x8e>
	unsigned char test_password[15] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
     958:	8f e0       	ldi	r24, 0x0F	; 15
     95a:	e7 e3       	ldi	r30, 0x37	; 55
     95c:	f1 e0       	ldi	r31, 0x01	; 1
     95e:	de 01       	movw	r26, r28
     960:	ab 5a       	subi	r26, 0xAB	; 171
     962:	bf 4f       	sbci	r27, 0xFF	; 255
     964:	01 90       	ld	r0, Z+
     966:	0d 92       	st	X+, r0
     968:	8a 95       	dec	r24
     96a:	e1 f7       	brne	.-8      	; 0x964 <main+0xa2>
	unsigned char new_password[15] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
     96c:	8f e0       	ldi	r24, 0x0F	; 15
     96e:	e7 e3       	ldi	r30, 0x37	; 55
     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	de 01       	movw	r26, r28
     974:	ac 59       	subi	r26, 0x9C	; 156
     976:	bf 4f       	sbci	r27, 0xFF	; 255
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	8a 95       	dec	r24
     97e:	e1 f7       	brne	.-8      	; 0x978 <main+0xb6>
	
	unsigned int accuracy = 0;
	
	Count = 0; // 외부인터럽트 발생 횟수 초기화
     980:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <Count>
	
	unsigned int error_count = 0;
	unsigned int select_count = 0;
	
	PortInit();  // LCD 포트 제어
     984:	a2 db       	rcall	.-2236   	; 0xca <PortInit>
	LCD_Init();  // LCD 초기화 함수
     986:	fb db       	rcall	.-2058   	; 0x17e <LCD_Init>
	
	PORT_Init(); // 부저 및 키패드 포트 제어
     988:	d9 dd       	rcall	.-1102   	; 0x53c <PORT_Init>
	interrupt_init();
     98a:	fe de       	rcall	.-516    	; 0x788 <interrupt_init>
     98c:	7b df       	rcall	.-266    	; 0x884 <PORT_TIMER_Init>
	
	PORT_TIMER_Init(); // 서브 모터 포트 제어
     98e:	5f df       	rcall	.-322    	; 0x84e <Init_TimerINT>
	Init_TimerINT();  // 타이머 초기화
     990:	8b ef       	ldi	r24, 0xFB	; 251
     992:	94 e0       	ldi	r25, 0x04	; 4
	
	TWO_SSound(SOL);
     994:	6a dc       	rcall	.-1836   	; 0x26a <TWO_SSound>
     996:	81 2c       	mov	r8, r1
     998:	91 2c       	mov	r9, r1
     99a:	a1 2c       	mov	r10, r1
	unsigned int accuracy = 0;
	
	Count = 0; // 외부인터럽트 발생 횟수 초기화
	
	unsigned int error_count = 0;
	unsigned int select_count = 0;
     99c:	b1 2c       	mov	r11, r1
     99e:	01 e0       	ldi	r16, 0x01	; 1
	
	unsigned int accuracy = 0;
	
	Count = 0; // 외부인터럽트 발생 횟수 초기화
	
	unsigned int error_count = 0;
     9a0:	10 e0       	ldi	r17, 0x00	; 0
     9a2:	c1 2c       	mov	r12, r1
	unsigned char str_dooropen[] = "DOOR OPEN";
	unsigned char str_error[] = "error.......";
	unsigned char str_warning[] = "warning.....";
	unsigned char str_theft[] = "if,theft";
	
	unsigned int  position = 1;
     9a4:	d1 2c       	mov	r13, r1
     9a6:	e1 2c       	mov	r14, r1
void main(){
	unsigned char sel_row;
	unsigned char keypad_code = 0;
	unsigned char hkeypad_code = 0;
	int fnd_value = 0;
	unsigned int state = 0;
     9a8:	f1 2c       	mov	r15, r1
     9aa:	61 2c       	mov	r6, r1
//마스터키 함수
void main(){
	unsigned char sel_row;
	unsigned char keypad_code = 0;
	unsigned char hkeypad_code = 0;
	int fnd_value = 0;
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <main+0xee>
     9ae:	67 2c       	mov	r6, r7

//마스터키 함수
void main(){
	unsigned char sel_row;
	unsigned char keypad_code = 0;
	unsigned char hkeypad_code = 0;
     9b0:	c1 14       	cp	r12, r1
	LCD_pos(0,1); LCD_STR(str_mastermode);
	LCD_pos(1,1); LCD_STR(star);
}

//마스터키 함수
void main(){
     9b2:	d1 04       	cpc	r13, r1
	
	
	
	while(1){
		// 초기 상태로 '#'버튼을 눌러 패스워드 입력창이 뜨기 전까지 FND가 켜지지 않게 한다.
		if(state == 0){
     9b4:	11 f0       	breq	.+4      	; 0x9ba <main+0xf8>
     9b6:	c7 01       	movw	r24, r14
     9b8:	d1 dd       	rcall	.-1118   	; 0x55c <FND_Disp>
			state = state;
		}
		else{
			FND_Disp(fnd_value); // FND에 숫자 출력 [4자리]
     9ba:	77 24       	eor	r7, r7
     9bc:	7a 94       	dec	r7
     9be:	41 e0       	ldi	r20, 0x01	; 1

//마스터키 함수
void main(){
	unsigned char sel_row;
	unsigned char keypad_code = 0;
	unsigned char hkeypad_code = 0;
     9c0:	45 c0       	rjmp	.+138    	; 0xa4c <main+0x18a>
     9c2:	85 b3       	in	r24, 0x15	; 21
     9c4:	80 6f       	ori	r24, 0xF0	; 240
     9c6:	85 bb       	out	0x15, r24	; 21
			FND_Disp(fnd_value); // FND에 숫자 출력 [4자리]
		}
		
		keypad_code = 0xFF;  // 키패드 입력감지 위해 초기값 설정(이후에 0xff가 아니면 키패드 입력 있음)
		for(sel_row=1; sel_row<=4; sel_row++){// row를 바꾸어 가며 키패드 일기
			SetRow(sel_row);   // row 선택
     9c8:	55 b3       	in	r21, 0x15	; 21
     9ca:	24 2f       	mov	r18, r20
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	6d 5f       	subi	r22, 0xFD	; 253
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <main+0x11c>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	6a 95       	dec	r22
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <main+0x118>
     9e2:	80 95       	com	r24
     9e4:	85 23       	and	r24, r21
     9e6:	85 bb       	out	0x15, r24	; 21
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	9f e8       	ldi	r25, 0x8F	; 143
     9ec:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <main+0x12a>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <main+0x130>
     9f2:	00 00       	nop
     9f4:	83 b3       	in	r24, 0x13	; 19
     9f6:	8f 70       	andi	r24, 0x0F	; 15
     9f8:	82 30       	cpi	r24, 0x02	; 2
			_delay_ms(10);      // 안정적인 col 읽기 위함
			col = (PINC & 0x0F);
     9fa:	89 f0       	breq	.+34     	; 0xa1e <main+0x15c>
     9fc:	18 f4       	brcc	.+6      	; 0xa04 <main+0x142>
			switch(col){
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	31 f0       	breq	.+12     	; 0xa0e <main+0x14c>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <main+0x188>
     a04:	84 30       	cpi	r24, 0x04	; 4
     a06:	a1 f0       	breq	.+40     	; 0xa30 <main+0x16e>
     a08:	88 30       	cpi	r24, 0x08	; 8
     a0a:	e1 f0       	breq	.+56     	; 0xa44 <main+0x182>
     a0c:	1e c0       	rjmp	.+60     	; 0xa4a <main+0x188>
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	31 09       	sbc	r19, r1
     a12:	22 0f       	add	r18, r18
				case 0x01 : keypad_code = (sel_row - 1)*4 + 1; break; // 1번 col의 스위치가 눌린 경우
     a14:	22 0f       	add	r18, r18
     a16:	77 24       	eor	r7, r7
     a18:	73 94       	inc	r7
     a1a:	72 0e       	add	r7, r18
     a1c:	16 c0       	rjmp	.+44     	; 0xa4a <main+0x188>
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	31 09       	sbc	r19, r1
     a22:	22 0f       	add	r18, r18
				case 0x02 : keypad_code = (sel_row - 1)*4 + 2; break; // 2번 col의 스위치가 눌린 경우
     a24:	22 0f       	add	r18, r18
     a26:	68 94       	set
     a28:	77 24       	eor	r7, r7
     a2a:	71 f8       	bld	r7, 1
     a2c:	72 0e       	add	r7, r18
     a2e:	0d c0       	rjmp	.+26     	; 0xa4a <main+0x188>
     a30:	21 50       	subi	r18, 0x01	; 1
     a32:	31 09       	sbc	r19, r1
     a34:	22 0f       	add	r18, r18
				case 0x04 : keypad_code = (sel_row - 1)*4 + 3; break; // 3번 col의 스위치가 눌린 경우
     a36:	22 0f       	add	r18, r18
     a38:	0f 2e       	mov	r0, r31
     a3a:	f3 e0       	ldi	r31, 0x03	; 3
     a3c:	7f 2e       	mov	r7, r31
     a3e:	f0 2d       	mov	r31, r0
     a40:	72 0e       	add	r7, r18
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <main+0x188>
     a44:	74 2e       	mov	r7, r20
     a46:	77 0c       	add	r7, r7
     a48:	77 0c       	add	r7, r7
				case 0x08 : keypad_code = (sel_row - 1)*4 + 4; break; // 4번 col의 스위치가 눌린 경우
     a4a:	4f 5f       	subi	r20, 0xFF	; 255
     a4c:	45 30       	cpi	r20, 0x05	; 5
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <main+0x190>
		else{
			FND_Disp(fnd_value); // FND에 숫자 출력 [4자리]
		}
		
		keypad_code = 0xFF;  // 키패드 입력감지 위해 초기값 설정(이후에 0xff가 아니면 키패드 입력 있음)
		for(sel_row=1; sel_row<=4; sel_row++){// row를 바꾸어 가며 키패드 일기
     a50:	b8 cf       	rjmp	.-144    	; 0x9c2 <main+0x100>
     a52:	87 2d       	mov	r24, r7
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <Count>
				case 0x02 : keypad_code = (sel_row - 1)*4 + 2; break; // 2번 col의 스위치가 눌린 경우
				case 0x04 : keypad_code = (sel_row - 1)*4 + 3; break; // 3번 col의 스위치가 눌린 경우
				case 0x08 : keypad_code = (sel_row - 1)*4 + 4; break; // 4번 col의 스위치가 눌린 경우
			}
		}
		sw = keypad_code;
     a5a:	21 30       	cpi	r18, 0x01	; 1
		if(Count ==1){
     a5c:	09 f0       	breq	.+2      	; 0xa60 <main+0x19e>
     a5e:	1c c1       	rjmp	.+568    	; 0xc98 <main+0x3d6>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	91 05       	cpc	r25, r1
			select_count = 0;
			if(			sw == 0x01){LCD_pos(1,position); LCD_CHAR('1'); new_password[position-1] = 1; position += 1;} // 1
     a64:	91 f4       	brne	.+36     	; 0xa8a <main+0x1c8>
     a66:	60 2f       	mov	r22, r16
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	74 db       	rcall	.-2328   	; 0x154 <LCD_pos>
     a6c:	81 e3       	ldi	r24, 0x31	; 49
     a6e:	5f db       	rcall	.-2370   	; 0x12e <LCD_CHAR>
     a70:	f8 01       	movw	r30, r16
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	8c 0f       	add	r24, r28
     a7a:	9d 1f       	adc	r25, r29
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 83       	st	Z, r24
     a84:	0f 5f       	subi	r16, 0xFF	; 255
     a86:	1f 4f       	sbci	r17, 0xFF	; 255
     a88:	c8 c0       	rjmp	.+400    	; 0xc1a <main+0x358>
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	91 05       	cpc	r25, r1
			else if(	sw == 0x02){LCD_pos(1,position); LCD_CHAR('2'); new_password[position-1] = 2; position += 1;} // 2
     a8e:	91 f4       	brne	.+36     	; 0xab4 <main+0x1f2>
     a90:	60 2f       	mov	r22, r16
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	5f db       	rcall	.-2370   	; 0x154 <LCD_pos>
     a96:	82 e3       	ldi	r24, 0x32	; 50
     a98:	4a db       	rcall	.-2412   	; 0x12e <LCD_CHAR>
     a9a:	f8 01       	movw	r30, r16
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	84 e6       	ldi	r24, 0x64	; 100
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	8c 0f       	add	r24, r28
     aa4:	9d 1f       	adc	r25, r29
     aa6:	e8 0f       	add	r30, r24
     aa8:	f9 1f       	adc	r31, r25
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	80 83       	st	Z, r24
     aae:	0f 5f       	subi	r16, 0xFF	; 255
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
     ab2:	b3 c0       	rjmp	.+358    	; 0xc1a <main+0x358>
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	91 05       	cpc	r25, r1
			else if(	sw == 0x03){LCD_pos(1,position); LCD_CHAR('3'); new_password[position-1] = 3; position += 1;} // 3
     ab8:	91 f4       	brne	.+36     	; 0xade <main+0x21c>
     aba:	60 2f       	mov	r22, r16
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	4a db       	rcall	.-2412   	; 0x154 <LCD_pos>
     ac0:	83 e3       	ldi	r24, 0x33	; 51
     ac2:	35 db       	rcall	.-2454   	; 0x12e <LCD_CHAR>
     ac4:	f8 01       	movw	r30, r16
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	84 e6       	ldi	r24, 0x64	; 100
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	8c 0f       	add	r24, r28
     ace:	9d 1f       	adc	r25, r29
     ad0:	e8 0f       	add	r30, r24
     ad2:	f9 1f       	adc	r31, r25
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	80 83       	st	Z, r24
     ad8:	0f 5f       	subi	r16, 0xFF	; 255
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	9e c0       	rjmp	.+316    	; 0xc1a <main+0x358>
     ade:	84 30       	cpi	r24, 0x04	; 4
     ae0:	91 05       	cpc	r25, r1
			else if(	sw == 0x04){position = position;} // M1
     ae2:	09 f4       	brne	.+2      	; 0xae6 <main+0x224>
     ae4:	9a c0       	rjmp	.+308    	; 0xc1a <main+0x358>
     ae6:	85 30       	cpi	r24, 0x05	; 5
     ae8:	91 05       	cpc	r25, r1
			else if(	sw == 0x05){LCD_pos(1,position); LCD_CHAR('4'); new_password[position-1] = 4; position += 1;} // 4
     aea:	91 f4       	brne	.+36     	; 0xb10 <main+0x24e>
     aec:	60 2f       	mov	r22, r16
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	31 db       	rcall	.-2462   	; 0x154 <LCD_pos>
     af2:	84 e3       	ldi	r24, 0x34	; 52
     af4:	1c db       	rcall	.-2504   	; 0x12e <LCD_CHAR>
     af6:	f8 01       	movw	r30, r16
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	84 e6       	ldi	r24, 0x64	; 100
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8c 0f       	add	r24, r28
     b00:	9d 1f       	adc	r25, r29
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	80 83       	st	Z, r24
     b0a:	0f 5f       	subi	r16, 0xFF	; 255
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
     b0e:	85 c0       	rjmp	.+266    	; 0xc1a <main+0x358>
     b10:	86 30       	cpi	r24, 0x06	; 6
     b12:	91 05       	cpc	r25, r1
			else if(	sw == 0x06){LCD_pos(1,position); LCD_CHAR('5'); new_password[position-1] = 5; position += 1;} // 5
     b14:	91 f4       	brne	.+36     	; 0xb3a <main+0x278>
     b16:	60 2f       	mov	r22, r16
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	1c db       	rcall	.-2504   	; 0x154 <LCD_pos>
     b1c:	85 e3       	ldi	r24, 0x35	; 53
     b1e:	07 db       	rcall	.-2546   	; 0x12e <LCD_CHAR>
     b20:	f8 01       	movw	r30, r16
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	84 e6       	ldi	r24, 0x64	; 100
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	8c 0f       	add	r24, r28
     b2a:	9d 1f       	adc	r25, r29
     b2c:	e8 0f       	add	r30, r24
     b2e:	f9 1f       	adc	r31, r25
     b30:	85 e0       	ldi	r24, 0x05	; 5
     b32:	80 83       	st	Z, r24
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	70 c0       	rjmp	.+224    	; 0xc1a <main+0x358>
     b3a:	87 30       	cpi	r24, 0x07	; 7
     b3c:	91 05       	cpc	r25, r1
			else if(	sw == 0x07){LCD_pos(1,position); LCD_CHAR('6'); new_password[position-1] = 6; position += 1;} // 6
     b3e:	91 f4       	brne	.+36     	; 0xb64 <main+0x2a2>
     b40:	60 2f       	mov	r22, r16
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	07 db       	rcall	.-2546   	; 0x154 <LCD_pos>
     b46:	86 e3       	ldi	r24, 0x36	; 54
     b48:	f2 da       	rcall	.-2588   	; 0x12e <LCD_CHAR>
     b4a:	f8 01       	movw	r30, r16
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	84 e6       	ldi	r24, 0x64	; 100
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8c 0f       	add	r24, r28
     b54:	9d 1f       	adc	r25, r29
     b56:	e8 0f       	add	r30, r24
     b58:	f9 1f       	adc	r31, r25
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	80 83       	st	Z, r24
     b5e:	0f 5f       	subi	r16, 0xFF	; 255
     b60:	1f 4f       	sbci	r17, 0xFF	; 255
     b62:	5b c0       	rjmp	.+182    	; 0xc1a <main+0x358>
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	91 05       	cpc	r25, r1
			else if(	sw == 0x08){position = position;} // M2
     b68:	09 f4       	brne	.+2      	; 0xb6c <main+0x2aa>
     b6a:	57 c0       	rjmp	.+174    	; 0xc1a <main+0x358>
     b6c:	89 30       	cpi	r24, 0x09	; 9
     b6e:	91 05       	cpc	r25, r1
			else if(	sw == 0x09){LCD_pos(1,position); LCD_CHAR('7'); new_password[position-1] = 7; position += 1;} // 7
     b70:	91 f4       	brne	.+36     	; 0xb96 <main+0x2d4>
     b72:	60 2f       	mov	r22, r16
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	ee da       	rcall	.-2596   	; 0x154 <LCD_pos>
     b78:	87 e3       	ldi	r24, 0x37	; 55
     b7a:	d9 da       	rcall	.-2638   	; 0x12e <LCD_CHAR>
     b7c:	f8 01       	movw	r30, r16
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	84 e6       	ldi	r24, 0x64	; 100
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	8c 0f       	add	r24, r28
     b86:	9d 1f       	adc	r25, r29
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	87 e0       	ldi	r24, 0x07	; 7
     b8e:	80 83       	st	Z, r24
     b90:	0f 5f       	subi	r16, 0xFF	; 255
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	42 c0       	rjmp	.+132    	; 0xc1a <main+0x358>
     b96:	8a 30       	cpi	r24, 0x0A	; 10
     b98:	91 05       	cpc	r25, r1
			else if(	sw == 0x0a){LCD_pos(1,position); LCD_CHAR('8'); new_password[position-1] = 8; position += 1;} // 8
     b9a:	91 f4       	brne	.+36     	; 0xbc0 <main+0x2fe>
     b9c:	60 2f       	mov	r22, r16
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	d9 da       	rcall	.-2638   	; 0x154 <LCD_pos>
     ba2:	88 e3       	ldi	r24, 0x38	; 56
     ba4:	c4 da       	rcall	.-2680   	; 0x12e <LCD_CHAR>
     ba6:	f8 01       	movw	r30, r16
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	84 e6       	ldi	r24, 0x64	; 100
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	8c 0f       	add	r24, r28
     bb0:	9d 1f       	adc	r25, r29
     bb2:	e8 0f       	add	r30, r24
     bb4:	f9 1f       	adc	r31, r25
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	80 83       	st	Z, r24
     bba:	0f 5f       	subi	r16, 0xFF	; 255
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	2d c0       	rjmp	.+90     	; 0xc1a <main+0x358>
     bc0:	8b 30       	cpi	r24, 0x0B	; 11
     bc2:	91 05       	cpc	r25, r1
			else if(	sw == 0x0b){LCD_pos(1,position); LCD_CHAR('9'); new_password[position-1] = 9; position += 1;} // 9
     bc4:	91 f4       	brne	.+36     	; 0xbea <main+0x328>
     bc6:	60 2f       	mov	r22, r16
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	c4 da       	rcall	.-2680   	; 0x154 <LCD_pos>
     bcc:	89 e3       	ldi	r24, 0x39	; 57
     bce:	af da       	rcall	.-2722   	; 0x12e <LCD_CHAR>
     bd0:	f8 01       	movw	r30, r16
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	84 e6       	ldi	r24, 0x64	; 100
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	8c 0f       	add	r24, r28
     bda:	9d 1f       	adc	r25, r29
     bdc:	e8 0f       	add	r30, r24
     bde:	f9 1f       	adc	r31, r25
     be0:	89 e0       	ldi	r24, 0x09	; 9
     be2:	80 83       	st	Z, r24
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	18 c0       	rjmp	.+48     	; 0xc1a <main+0x358>
     bea:	8c 30       	cpi	r24, 0x0C	; 12
     bec:	91 05       	cpc	r25, r1
			else if(	sw == 0x0c){position = position;} // M3
     bee:	a9 f0       	breq	.+42     	; 0xc1a <main+0x358>
     bf0:	8d 30       	cpi	r24, 0x0D	; 13
     bf2:	91 05       	cpc	r25, r1
			else if(	sw == 0x0d){position = position;} // *
     bf4:	91 f0       	breq	.+36     	; 0xc1a <main+0x358>
     bf6:	0e 97       	sbiw	r24, 0x0e	; 14
     bf8:	81 f4       	brne	.+32     	; 0xc1a <main+0x358>
			
			else if(	sw == 0x0e){LCD_pos(1,position); LCD_CHAR('0'); new_password[position-1] = 0; position += 1;} // 0
     bfa:	60 2f       	mov	r22, r16
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	aa da       	rcall	.-2732   	; 0x154 <LCD_pos>
     c00:	80 e3       	ldi	r24, 0x30	; 48
     c02:	95 da       	rcall	.-2774   	; 0x12e <LCD_CHAR>
     c04:	f8 01       	movw	r30, r16
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	84 e6       	ldi	r24, 0x64	; 100
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	8c 0f       	add	r24, r28
     c0e:	9d 1f       	adc	r25, r29
     c10:	e8 0f       	add	r30, r24
     c12:	f9 1f       	adc	r31, r25
     c14:	10 82       	st	Z, r1
     c16:	0f 5f       	subi	r16, 0xFF	; 255
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	17 c0       	rjmp	.+46     	; 0xc4e <main+0x38c>
     c20:	e4 e6       	ldi	r30, 0x64	; 100
			else if(	sw == 0x0f){position = position;} // #
			else if(	sw == 0x10){position = position;} //M4
			
			// 다음번 번호 입력할 때 이번 입력과 겹치지 않도록 배열을 초기화 하는 과정
			for(int i=0; i<(position-1); i++){
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ec 0f       	add	r30, r28
     c26:	fd 1f       	adc	r31, r29
				user_password[i] = new_password[i];
     c28:	e8 0f       	add	r30, r24
     c2a:	f9 1f       	adc	r31, r25
     c2c:	20 81       	ld	r18, Z
     c2e:	e6 e4       	ldi	r30, 0x46	; 70
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ec 0f       	add	r30, r28
     c34:	fd 1f       	adc	r31, r29
     c36:	e8 0f       	add	r30, r24
     c38:	f9 1f       	adc	r31, r25
     c3a:	20 83       	st	Z, r18
     c3c:	e5 e5       	ldi	r30, 0x55	; 85
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ec 0f       	add	r30, r28
     c42:	fd 1f       	adc	r31, r29
				test_password[i] = 10;
     c44:	e8 0f       	add	r30, r24
     c46:	f9 1f       	adc	r31, r25
     c48:	2a e0       	ldi	r18, 0x0A	; 10
     c4a:	20 83       	st	Z, r18
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	98 01       	movw	r18, r16
     c50:	21 50       	subi	r18, 0x01	; 1
     c52:	31 09       	sbc	r19, r1
			else if(	sw == 0x0e){LCD_pos(1,position); LCD_CHAR('0'); new_password[position-1] = 0; position += 1;} // 0
			else if(	sw == 0x0f){position = position;} // #
			else if(	sw == 0x10){position = position;} //M4
			
			// 다음번 번호 입력할 때 이번 입력과 겹치지 않도록 배열을 초기화 하는 과정
			for(int i=0; i<(position-1); i++){
     c54:	82 17       	cp	r24, r18
     c56:	93 07       	cpc	r25, r19
     c58:	18 f3       	brcs	.-58     	; 0xc20 <main+0x35e>
     c5a:	18 c0       	rjmp	.+48     	; 0xc8c <main+0x3ca>
     c5c:	e6 e4       	ldi	r30, 0x46	; 70
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	ec 0f       	add	r30, r28
				user_password[i] = new_password[i];
				test_password[i] = 10;
			}
			for(int i=position-1; i<15; i++){
     c62:	fd 1f       	adc	r31, r29
				user_password[i] = 10;
     c64:	e2 0f       	add	r30, r18
     c66:	f3 1f       	adc	r31, r19
     c68:	8a e0       	ldi	r24, 0x0A	; 10
     c6a:	80 83       	st	Z, r24
     c6c:	e4 e6       	ldi	r30, 0x64	; 100
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ec 0f       	add	r30, r28
				new_password[i] = 10;
     c72:	fd 1f       	adc	r31, r29
     c74:	e2 0f       	add	r30, r18
     c76:	f3 1f       	adc	r31, r19
     c78:	80 83       	st	Z, r24
     c7a:	e5 e5       	ldi	r30, 0x55	; 85
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
				test_password[i] = 10;
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	80 83       	st	Z, r24
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
			// 다음번 번호 입력할 때 이번 입력과 겹치지 않도록 배열을 초기화 하는 과정
			for(int i=0; i<(position-1); i++){
				user_password[i] = new_password[i];
				test_password[i] = 10;
			}
			for(int i=position-1; i<15; i++){
     c8c:	2f 30       	cpi	r18, 0x0F	; 15
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f3       	brlt	.-54     	; 0xc5c <main+0x39a>
     c92:	81 2c       	mov	r8, r1
     c94:	91 2c       	mov	r9, r1
				case 0x08 : keypad_code = (sel_row - 1)*4 + 4; break; // 4번 col의 스위치가 눌린 경우
			}
		}
		sw = keypad_code;
		if(Count ==1){
			select_count = 0;
     c96:	fb c1       	rjmp	.+1014   	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	91 05       	cpc	r25, r1
				test_password[i] = 10;
			}
		}
		
		else{
			if(			sw == 0x01){LCD_pos(1,position); LCD_CHAR('1'); test_password[position-1] = 1; position += 1; select_count = 0;} // 1
     c9c:	a1 f4       	brne	.+40     	; 0xcc6 <main+0x404>
     c9e:	60 2f       	mov	r22, r16
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	58 da       	rcall	.-2896   	; 0x154 <LCD_pos>
     ca4:	81 e3       	ldi	r24, 0x31	; 49
     ca6:	43 da       	rcall	.-2938   	; 0x12e <LCD_CHAR>
     ca8:	f8 01       	movw	r30, r16
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	85 e5       	ldi	r24, 0x55	; 85
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	8c 0f       	add	r24, r28
     cb2:	9d 1f       	adc	r25, r29
     cb4:	e8 0f       	add	r30, r24
     cb6:	f9 1f       	adc	r31, r25
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 83       	st	Z, r24
     cbc:	0f 5f       	subi	r16, 0xFF	; 255
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	81 2c       	mov	r8, r1
     cc2:	91 2c       	mov	r9, r1
     cc4:	a3 c1       	rjmp	.+838    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	91 05       	cpc	r25, r1
			else if(	sw == 0x02){LCD_pos(1,position); LCD_CHAR('2'); test_password[position-1] = 2; position += 1; select_count = 0;} // 2
     cca:	a1 f4       	brne	.+40     	; 0xcf4 <main+0x432>
     ccc:	60 2f       	mov	r22, r16
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	41 da       	rcall	.-2942   	; 0x154 <LCD_pos>
     cd2:	82 e3       	ldi	r24, 0x32	; 50
     cd4:	2c da       	rcall	.-2984   	; 0x12e <LCD_CHAR>
     cd6:	f8 01       	movw	r30, r16
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	85 e5       	ldi	r24, 0x55	; 85
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	8c 0f       	add	r24, r28
     ce0:	9d 1f       	adc	r25, r29
     ce2:	e8 0f       	add	r30, r24
     ce4:	f9 1f       	adc	r31, r25
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 83       	st	Z, r24
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	81 2c       	mov	r8, r1
     cf0:	91 2c       	mov	r9, r1
     cf2:	8c c1       	rjmp	.+792    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	91 05       	cpc	r25, r1
     cf8:	a1 f4       	brne	.+40     	; 0xd22 <main+0x460>
			else if(	sw == 0x03){LCD_pos(1,position); LCD_CHAR('3'); test_password[position-1] = 3; position += 1; select_count = 0;} // 3
     cfa:	60 2f       	mov	r22, r16
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	2a da       	rcall	.-2988   	; 0x154 <LCD_pos>
     d00:	83 e3       	ldi	r24, 0x33	; 51
     d02:	15 da       	rcall	.-3030   	; 0x12e <LCD_CHAR>
     d04:	f8 01       	movw	r30, r16
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	85 e5       	ldi	r24, 0x55	; 85
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	8c 0f       	add	r24, r28
     d0e:	9d 1f       	adc	r25, r29
     d10:	e8 0f       	add	r30, r24
     d12:	f9 1f       	adc	r31, r25
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	80 83       	st	Z, r24
     d18:	0f 5f       	subi	r16, 0xFF	; 255
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	81 2c       	mov	r8, r1
     d1e:	91 2c       	mov	r9, r1
     d20:	75 c1       	rjmp	.+746    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <main+0x468>
			else if(	sw == 0x04){position = position;} // M1
     d28:	71 c1       	rjmp	.+738    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     d2a:	85 30       	cpi	r24, 0x05	; 5
     d2c:	91 05       	cpc	r25, r1
			else if(	sw == 0x05){LCD_pos(1,position); LCD_CHAR('4'); test_password[position-1] = 4; position += 1; select_count = 0;} // 4
     d2e:	a1 f4       	brne	.+40     	; 0xd58 <main+0x496>
     d30:	60 2f       	mov	r22, r16
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0f da       	rcall	.-3042   	; 0x154 <LCD_pos>
     d36:	84 e3       	ldi	r24, 0x34	; 52
     d38:	fa d9       	rcall	.-3084   	; 0x12e <LCD_CHAR>
     d3a:	f8 01       	movw	r30, r16
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	85 e5       	ldi	r24, 0x55	; 85
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	8c 0f       	add	r24, r28
     d44:	9d 1f       	adc	r25, r29
     d46:	e8 0f       	add	r30, r24
     d48:	f9 1f       	adc	r31, r25
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	80 83       	st	Z, r24
     d4e:	0f 5f       	subi	r16, 0xFF	; 255
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	81 2c       	mov	r8, r1
     d54:	91 2c       	mov	r9, r1
     d56:	5a c1       	rjmp	.+692    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     d58:	86 30       	cpi	r24, 0x06	; 6
     d5a:	91 05       	cpc	r25, r1
			else if(	sw == 0x06){LCD_pos(1,position); LCD_CHAR('5'); test_password[position-1] = 5; position += 1; select_count = 0;} // 5
     d5c:	a1 f4       	brne	.+40     	; 0xd86 <main+0x4c4>
     d5e:	60 2f       	mov	r22, r16
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	f8 d9       	rcall	.-3088   	; 0x154 <LCD_pos>
     d64:	85 e3       	ldi	r24, 0x35	; 53
     d66:	e3 d9       	rcall	.-3130   	; 0x12e <LCD_CHAR>
     d68:	f8 01       	movw	r30, r16
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	85 e5       	ldi	r24, 0x55	; 85
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	8c 0f       	add	r24, r28
     d72:	9d 1f       	adc	r25, r29
     d74:	e8 0f       	add	r30, r24
     d76:	f9 1f       	adc	r31, r25
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	80 83       	st	Z, r24
     d7c:	0f 5f       	subi	r16, 0xFF	; 255
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	81 2c       	mov	r8, r1
     d82:	91 2c       	mov	r9, r1
     d84:	43 c1       	rjmp	.+646    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     d86:	87 30       	cpi	r24, 0x07	; 7
     d88:	91 05       	cpc	r25, r1
			else if(	sw == 0x07){LCD_pos(1,position); LCD_CHAR('6'); test_password[position-1] = 6; position += 1; select_count = 0;} // 6
     d8a:	a1 f4       	brne	.+40     	; 0xdb4 <main+0x4f2>
     d8c:	60 2f       	mov	r22, r16
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	e1 d9       	rcall	.-3134   	; 0x154 <LCD_pos>
     d92:	86 e3       	ldi	r24, 0x36	; 54
     d94:	cc d9       	rcall	.-3176   	; 0x12e <LCD_CHAR>
     d96:	f8 01       	movw	r30, r16
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	85 e5       	ldi	r24, 0x55	; 85
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	8c 0f       	add	r24, r28
     da0:	9d 1f       	adc	r25, r29
     da2:	e8 0f       	add	r30, r24
     da4:	f9 1f       	adc	r31, r25
     da6:	86 e0       	ldi	r24, 0x06	; 6
     da8:	80 83       	st	Z, r24
     daa:	0f 5f       	subi	r16, 0xFF	; 255
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	81 2c       	mov	r8, r1
     db0:	91 2c       	mov	r9, r1
     db2:	2c c1       	rjmp	.+600    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     db4:	88 30       	cpi	r24, 0x08	; 8
     db6:	91 05       	cpc	r25, r1
			else if(	sw == 0x08){position = position;} // M2
     db8:	09 f4       	brne	.+2      	; 0xdbc <main+0x4fa>
     dba:	28 c1       	rjmp	.+592    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     dbc:	89 30       	cpi	r24, 0x09	; 9
     dbe:	91 05       	cpc	r25, r1
			else if(	sw == 0x09){LCD_pos(1,position); LCD_CHAR('7'); test_password[position-1] = 7; position += 1; select_count = 0;} // 7
     dc0:	a1 f4       	brne	.+40     	; 0xdea <main+0x528>
     dc2:	60 2f       	mov	r22, r16
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	c6 d9       	rcall	.-3188   	; 0x154 <LCD_pos>
     dc8:	87 e3       	ldi	r24, 0x37	; 55
     dca:	b1 d9       	rcall	.-3230   	; 0x12e <LCD_CHAR>
     dcc:	f8 01       	movw	r30, r16
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	85 e5       	ldi	r24, 0x55	; 85
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	8c 0f       	add	r24, r28
     dd6:	9d 1f       	adc	r25, r29
     dd8:	e8 0f       	add	r30, r24
     dda:	f9 1f       	adc	r31, r25
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	80 83       	st	Z, r24
     de0:	0f 5f       	subi	r16, 0xFF	; 255
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	81 2c       	mov	r8, r1
     de6:	91 2c       	mov	r9, r1
     de8:	11 c1       	rjmp	.+546    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     dea:	8a 30       	cpi	r24, 0x0A	; 10
     dec:	91 05       	cpc	r25, r1
			else if(	sw == 0x0a){LCD_pos(1,position); LCD_CHAR('8'); test_password[position-1] = 8; position += 1; select_count = 0;} // 8
     dee:	a1 f4       	brne	.+40     	; 0xe18 <main+0x556>
     df0:	60 2f       	mov	r22, r16
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	af d9       	rcall	.-3234   	; 0x154 <LCD_pos>
     df6:	88 e3       	ldi	r24, 0x38	; 56
     df8:	9a d9       	rcall	.-3276   	; 0x12e <LCD_CHAR>
     dfa:	f8 01       	movw	r30, r16
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	85 e5       	ldi	r24, 0x55	; 85
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	8c 0f       	add	r24, r28
     e04:	9d 1f       	adc	r25, r29
     e06:	e8 0f       	add	r30, r24
     e08:	f9 1f       	adc	r31, r25
     e0a:	88 e0       	ldi	r24, 0x08	; 8
     e0c:	80 83       	st	Z, r24
     e0e:	0f 5f       	subi	r16, 0xFF	; 255
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	81 2c       	mov	r8, r1
     e14:	91 2c       	mov	r9, r1
     e16:	fa c0       	rjmp	.+500    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     e18:	8b 30       	cpi	r24, 0x0B	; 11
     e1a:	91 05       	cpc	r25, r1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <main+0x584>
     e1e:	60 2f       	mov	r22, r16
			else if(	sw == 0x0b){LCD_pos(1,position); LCD_CHAR('9'); test_password[position-1] = 9; position += 1; select_count = 0;} // 9
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	98 d9       	rcall	.-3280   	; 0x154 <LCD_pos>
     e24:	89 e3       	ldi	r24, 0x39	; 57
     e26:	83 d9       	rcall	.-3322   	; 0x12e <LCD_CHAR>
     e28:	f8 01       	movw	r30, r16
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	85 e5       	ldi	r24, 0x55	; 85
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	8c 0f       	add	r24, r28
     e32:	9d 1f       	adc	r25, r29
     e34:	e8 0f       	add	r30, r24
     e36:	f9 1f       	adc	r31, r25
     e38:	89 e0       	ldi	r24, 0x09	; 9
     e3a:	80 83       	st	Z, r24
     e3c:	0f 5f       	subi	r16, 0xFF	; 255
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	81 2c       	mov	r8, r1
     e42:	91 2c       	mov	r9, r1
     e44:	e3 c0       	rjmp	.+454    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     e46:	8c 30       	cpi	r24, 0x0C	; 12
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <main+0x58c>
     e4c:	da c0       	rjmp	.+436    	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
			else if(	sw == 0x0c){position = position; select_count = 0;} // M3
     e4e:	8d 30       	cpi	r24, 0x0D	; 13
     e50:	91 05       	cpc	r25, r1
     e52:	09 f0       	breq	.+2      	; 0xe56 <main+0x594>
     e54:	a0 c0       	rjmp	.+320    	; 0xf96 <main+0x6d4>
			else if(	sw == 0x0d){
     e56:	9f ef       	ldi	r25, 0xFF	; 255
     e58:	89 1a       	sub	r8, r25
     e5a:	99 0a       	sbc	r9, r25
     e5c:	80 e0       	ldi	r24, 0x00	; 0
				select_count +=1;
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	20 e0       	ldi	r18, 0x00	; 0
				for(int i = 0; i <sizeof(user_password); i++){
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <main+0x5ca>
     e66:	e5 e5       	ldi	r30, 0x55	; 85
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	ec 0f       	add	r30, r28
					if(test_password[i] == user_password[i]) { accuracy += 1; }
     e6c:	fd 1f       	adc	r31, r29
     e6e:	e8 0f       	add	r30, r24
     e70:	f9 1f       	adc	r31, r25
     e72:	50 81       	ld	r21, Z
     e74:	e6 e4       	ldi	r30, 0x46	; 70
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	ec 0f       	add	r30, r28
     e7a:	fd 1f       	adc	r31, r29
     e7c:	e8 0f       	add	r30, r24
     e7e:	f9 1f       	adc	r31, r25
     e80:	40 81       	ld	r20, Z
     e82:	54 13       	cpse	r21, r20
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <main+0x5c8>
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	8f 30       	cpi	r24, 0x0F	; 15
			else if(	sw == 0x0a){LCD_pos(1,position); LCD_CHAR('8'); test_password[position-1] = 8; position += 1; select_count = 0;} // 8
			else if(	sw == 0x0b){LCD_pos(1,position); LCD_CHAR('9'); test_password[position-1] = 9; position += 1; select_count = 0;} // 9
			else if(	sw == 0x0c){position = position; select_count = 0;} // M3
			else if(	sw == 0x0d){
				select_count +=1;
				for(int i = 0; i <sizeof(user_password); i++){
     e8e:	91 05       	cpc	r25, r1
     e90:	50 f3       	brcs	.-44     	; 0xe66 <main+0x5a4>
					if(test_password[i] == user_password[i]) { accuracy += 1; }
					else { accuracy = accuracy;}}
					
					if (accuracy == sizeof(user_password)) {LCD_Clear(); error_count = 0;
     e92:	2f 30       	cpi	r18, 0x0F	; 15
     e94:	31 05       	cpc	r19, r1
     e96:	a1 f5       	brne	.+104    	; 0xf00 <main+0x63e>
     e98:	68 d9       	rcall	.-3376   	; 0x16a <LCD_Clear>
						THREE_SSound(DO); _delay_ms(500); THREE_SSound(MI); _delay_ms(500); THREE_SSound(SOL); _delay_ms(500);  THREE_SSound(HIGH_DO);
     e9a:	84 e7       	ldi	r24, 0x74	; 116
     e9c:	97 e0       	ldi	r25, 0x07	; 7
     e9e:	1a da       	rcall	.-3020   	; 0x2d4 <THREE_SSound>
     ea0:	2f ef       	ldi	r18, 0xFF	; 255
     ea2:	8f e7       	ldi	r24, 0x7F	; 127
     ea4:	96 e1       	ldi	r25, 0x16	; 22
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	80 40       	sbci	r24, 0x00	; 0
     eaa:	90 40       	sbci	r25, 0x00	; 0
     eac:	e1 f7       	brne	.-8      	; 0xea6 <main+0x5e4>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <main+0x5ee>
     eb0:	00 00       	nop
     eb2:	8b ee       	ldi	r24, 0xEB	; 235
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	0e da       	rcall	.-3044   	; 0x2d4 <THREE_SSound>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	8f e7       	ldi	r24, 0x7F	; 127
     ebc:	96 e1       	ldi	r25, 0x16	; 22
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <main+0x5fc>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <main+0x606>
     ec8:	00 00       	nop
     eca:	8b ef       	ldi	r24, 0xFB	; 251
     ecc:	94 e0       	ldi	r25, 0x04	; 4
     ece:	02 da       	rcall	.-3068   	; 0x2d4 <THREE_SSound>
     ed0:	2f ef       	ldi	r18, 0xFF	; 255
     ed2:	8f e7       	ldi	r24, 0x7F	; 127
     ed4:	96 e1       	ldi	r25, 0x16	; 22
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	80 40       	sbci	r24, 0x00	; 0
     eda:	90 40       	sbci	r25, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <main+0x614>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <main+0x61e>
     ee0:	00 00       	nop
						SetServoDeg(90);
     ee2:	8c eb       	ldi	r24, 0xBC	; 188
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	f6 d9       	rcall	.-3092   	; 0x2d4 <THREE_SSound>
						LCD_pos(0,1); LCD_STR(str_dooropen);
     ee8:	8a e5       	ldi	r24, 0x5A	; 90
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	b5 dc       	rcall	.-1686   	; 0x858 <SetServoDeg>
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	30 d9       	rcall	.-3488   	; 0x154 <LCD_pos>
     ef4:	ce 01       	movw	r24, r28
     ef6:	49 96       	adiw	r24, 0x19	; 25
				select_count +=1;
				for(int i = 0; i <sizeof(user_password); i++){
					if(test_password[i] == user_password[i]) { accuracy += 1; }
					else { accuracy = accuracy;}}
					
					if (accuracy == sizeof(user_password)) {LCD_Clear(); error_count = 0;
     ef8:	21 d9       	rcall	.-3518   	; 0x13c <LCD_STR>
     efa:	a1 2c       	mov	r10, r1
						THREE_SSound(DO); _delay_ms(500); THREE_SSound(MI); _delay_ms(500); THREE_SSound(SOL); _delay_ms(500);  THREE_SSound(HIGH_DO);
						SetServoDeg(90);
						LCD_pos(0,1); LCD_STR(str_dooropen);
					}
					else {LCD_Clear(); error_count += 1;
     efc:	b1 2c       	mov	r11, r1
     efe:	39 c0       	rjmp	.+114    	; 0xf72 <main+0x6b0>
     f00:	34 d9       	rcall	.-3480   	; 0x16a <LCD_Clear>
     f02:	2f ef       	ldi	r18, 0xFF	; 255
     f04:	a2 1a       	sub	r10, r18
						THREE_SSound(LA); _delay_ms(500); THREE_SSound(LA); _delay_ms(500); THREE_SSound(LA);
     f06:	b2 0a       	sbc	r11, r18
     f08:	80 e7       	ldi	r24, 0x70	; 112
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	e3 d9       	rcall	.-3130   	; 0x2d4 <THREE_SSound>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f e7       	ldi	r25, 0x7F	; 127
     f12:	26 e1       	ldi	r18, 0x16	; 22
     f14:	81 50       	subi	r24, 0x01	; 1
     f16:	90 40       	sbci	r25, 0x00	; 0
     f18:	20 40       	sbci	r18, 0x00	; 0
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x652>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x65c>
     f1e:	00 00       	nop
     f20:	80 e7       	ldi	r24, 0x70	; 112
     f22:	94 e0       	ldi	r25, 0x04	; 4
     f24:	d7 d9       	rcall	.-3154   	; 0x2d4 <THREE_SSound>
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	9f e7       	ldi	r25, 0x7F	; 127
     f2a:	26 e1       	ldi	r18, 0x16	; 22
     f2c:	81 50       	subi	r24, 0x01	; 1
     f2e:	90 40       	sbci	r25, 0x00	; 0
     f30:	20 40       	sbci	r18, 0x00	; 0
     f32:	e1 f7       	brne	.-8      	; 0xf2c <main+0x66a>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <main+0x674>
     f36:	00 00       	nop
     f38:	80 e7       	ldi	r24, 0x70	; 112
     f3a:	94 e0       	ldi	r25, 0x04	; 4
     f3c:	cb d9       	rcall	.-3178   	; 0x2d4 <THREE_SSound>
						LCD_pos(0,1); LCD_STR(str_password);
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 d9       	rcall	.-3568   	; 0x154 <LCD_pos>
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	f9 d8       	rcall	.-3598   	; 0x13c <LCD_STR>
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	81 e0       	ldi	r24, 0x01	; 1
						LCD_pos(1,2); LCD_STR(str_error);
     f4e:	02 d9       	rcall	.-3580   	; 0x154 <LCD_pos>
     f50:	ce 01       	movw	r24, r28
     f52:	83 96       	adiw	r24, 0x23	; 35
     f54:	f3 d8       	rcall	.-3610   	; 0x13c <LCD_STR>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	26 e8       	ldi	r18, 0x86	; 134
     f5c:	81 50       	subi	r24, 0x01	; 1
     f5e:	90 40       	sbci	r25, 0x00	; 0
     f60:	20 40       	sbci	r18, 0x00	; 0
     f62:	e1 f7       	brne	.-8      	; 0xf5c <main+0x69a>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <main+0x6a4>
     f66:	00 00       	nop
     f68:	00 d9       	rcall	.-3584   	; 0x16a <LCD_Clear>
						_delay_ms(3000); LCD_Clear(); fnd_value = 0; state = 0;
     f6a:	c1 2c       	mov	r12, r1
     f6c:	d1 2c       	mov	r13, r1
     f6e:	e1 2c       	mov	r14, r1
     f70:	f1 2c       	mov	r15, r1
					}
					for (int i=0; i<15; i++){
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <main+0x6c8>
						
						test_password[i] = 10; // 다음번에 번호를 입력할 때 겹치지 않도록 초기화 시켜주는 과정
     f78:	e5 e5       	ldi	r30, 0x55	; 85
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	ec 0f       	add	r30, r28
     f7e:	fd 1f       	adc	r31, r29
     f80:	e8 0f       	add	r30, r24
     f82:	f9 1f       	adc	r31, r25
     f84:	2a e0       	ldi	r18, 0x0A	; 10
     f86:	20 83       	st	Z, r18
						THREE_SSound(LA); _delay_ms(500); THREE_SSound(LA); _delay_ms(500); THREE_SSound(LA);
						LCD_pos(0,1); LCD_STR(str_password);
						LCD_pos(1,2); LCD_STR(str_error);
						_delay_ms(3000); LCD_Clear(); fnd_value = 0; state = 0;
					}
					for (int i=0; i<15; i++){
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	8f 30       	cpi	r24, 0x0F	; 15
     f8c:	91 05       	cpc	r25, r1
     f8e:	a4 f3       	brlt	.-24     	; 0xf78 <main+0x6b6>
						
						test_password[i] = 10; // 다음번에 번호를 입력할 때 겹치지 않도록 초기화 시켜주는 과정
					}
					position = 1; accuracy = 0;
     f90:	01 e0       	ldi	r16, 0x01	; 1
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	3b c0       	rjmp	.+118    	; 0x100c <__DATA_REGION_LENGTH__+0xc>
				} // *
				
				else if(	sw == 0x0e){LCD_pos(1,position); LCD_CHAR('0'); test_password[position-1] = 0; position += 1; select_count = 0;} // 0
     f96:	8e 30       	cpi	r24, 0x0E	; 14
     f98:	91 05       	cpc	r25, r1
     f9a:	99 f4       	brne	.+38     	; 0xfc2 <main+0x700>
     f9c:	60 2f       	mov	r22, r16
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	d9 d8       	rcall	.-3662   	; 0x154 <LCD_pos>
     fa2:	80 e3       	ldi	r24, 0x30	; 48
     fa4:	c4 d8       	rcall	.-3704   	; 0x12e <LCD_CHAR>
     fa6:	f8 01       	movw	r30, r16
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	85 e5       	ldi	r24, 0x55	; 85
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	8c 0f       	add	r24, r28
     fb0:	9d 1f       	adc	r25, r29
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	10 82       	st	Z, r1
     fb8:	0f 5f       	subi	r16, 0xFF	; 255
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	81 2c       	mov	r8, r1
     fbe:	91 2c       	mov	r9, r1
     fc0:	25 c0       	rjmp	.+74     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
				else if(	sw == 0x0f){state = 1; position = 1; select_count = 0; LCD_Clear(); LCD_pos(0,1); _delay_ms(1); LCD_STR(str_password); LCD_pos(1,1); LCD_STR(number); select_count = 0;} // #
     fc2:	8f 30       	cpi	r24, 0x0F	; 15
     fc4:	91 05       	cpc	r25, r1
     fc6:	d1 f4       	brne	.+52     	; 0xffc <main+0x73a>
     fc8:	d0 d8       	rcall	.-3680   	; 0x16a <LCD_Clear>
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	c2 d8       	rcall	.-3708   	; 0x154 <LCD_pos>
     fd0:	86 e6       	ldi	r24, 0x66	; 102
     fd2:	9e e0       	ldi	r25, 0x0E	; 14
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <main+0x712>
     fd8:	00 00       	nop
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	ae d8       	rcall	.-3748   	; 0x13c <LCD_STR>
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	b7 d8       	rcall	.-3730   	; 0x154 <LCD_pos>
     fe6:	ce 01       	movw	r24, r28
     fe8:	0a 96       	adiw	r24, 0x0a	; 10
     fea:	a8 d8       	rcall	.-3760   	; 0x13c <LCD_STR>
     fec:	81 2c       	mov	r8, r1
     fee:	91 2c       	mov	r9, r1
     ff0:	01 e0       	ldi	r16, 0x01	; 1
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	cc 24       	eor	r12, r12
     ff6:	c3 94       	inc	r12
     ff8:	d1 2c       	mov	r13, r1
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
				else if(	sw == 0x10){position = position; select_count = 0;} // M4
     ffc:	40 97       	sbiw	r24, 0x10	; 16
     ffe:	31 f4       	brne	.+12     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
			else if(	sw == 0x07){LCD_pos(1,position); LCD_CHAR('6'); test_password[position-1] = 6; position += 1; select_count = 0;} // 6
			else if(	sw == 0x08){position = position;} // M2
			else if(	sw == 0x09){LCD_pos(1,position); LCD_CHAR('7'); test_password[position-1] = 7; position += 1; select_count = 0;} // 7
			else if(	sw == 0x0a){LCD_pos(1,position); LCD_CHAR('8'); test_password[position-1] = 8; position += 1; select_count = 0;} // 8
			else if(	sw == 0x0b){LCD_pos(1,position); LCD_CHAR('9'); test_password[position-1] = 9; position += 1; select_count = 0;} // 9
			else if(	sw == 0x0c){position = position; select_count = 0;} // M3
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1002:	81 2c       	mov	r8, r1
					position = 1; accuracy = 0;
				} // *
				
				else if(	sw == 0x0e){LCD_pos(1,position); LCD_CHAR('0'); test_password[position-1] = 0; position += 1; select_count = 0;} // 0
				else if(	sw == 0x0f){state = 1; position = 1; select_count = 0; LCD_Clear(); LCD_pos(0,1); _delay_ms(1); LCD_STR(str_password); LCD_pos(1,1); LCD_STR(number); select_count = 0;} // #
				else if(	sw == 0x10){position = position; select_count = 0;} // M4
    1004:	91 2c       	mov	r9, r1
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__DATA_REGION_LENGTH__+0xc>
				// 4번
				if(select_count >=2 ) {
    1008:	81 2c       	mov	r8, r1
    100a:	91 2c       	mov	r9, r1
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	89 16       	cp	r8, r25
					SSound(SOL); _delay_ms(500); SSound(FA); _delay_ms(500); SSound(MI); _delay_ms(500); SSound(RE);
    1010:	91 04       	cpc	r9, r1
    1012:	60 f1       	brcs	.+88     	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    1014:	8b ef       	ldi	r24, 0xFB	; 251
    1016:	94 e0       	ldi	r25, 0x04	; 4
    1018:	f7 d8       	rcall	.-3602   	; 0x208 <SSound>
    101a:	2f ef       	ldi	r18, 0xFF	; 255
    101c:	8f e7       	ldi	r24, 0x7F	; 127
    101e:	96 e1       	ldi	r25, 0x16	; 22
    1020:	21 50       	subi	r18, 0x01	; 1
    1022:	80 40       	sbci	r24, 0x00	; 0
    1024:	90 40       	sbci	r25, 0x00	; 0
    1026:	e1 f7       	brne	.-8      	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    102a:	00 00       	nop
    102c:	88 e9       	ldi	r24, 0x98	; 152
    102e:	95 e0       	ldi	r25, 0x05	; 5
    1030:	eb d8       	rcall	.-3626   	; 0x208 <SSound>
    1032:	2f ef       	ldi	r18, 0xFF	; 255
    1034:	8f e7       	ldi	r24, 0x7F	; 127
    1036:	96 e1       	ldi	r25, 0x16	; 22
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	80 40       	sbci	r24, 0x00	; 0
    103c:	90 40       	sbci	r25, 0x00	; 0
    103e:	e1 f7       	brne	.-8      	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    1042:	00 00       	nop
    1044:	8b ee       	ldi	r24, 0xEB	; 235
    1046:	95 e0       	ldi	r25, 0x05	; 5
    1048:	df d8       	rcall	.-3650   	; 0x208 <SSound>
    104a:	2f ef       	ldi	r18, 0xFF	; 255
    104c:	8f e7       	ldi	r24, 0x7F	; 127
    104e:	96 e1       	ldi	r25, 0x16	; 22
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	80 40       	sbci	r24, 0x00	; 0
    1054:	90 40       	sbci	r25, 0x00	; 0
    1056:	e1 f7       	brne	.-8      	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    105a:	00 00       	nop
    105c:	84 ea       	ldi	r24, 0xA4	; 164
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	d3 d8       	rcall	.-3674   	; 0x208 <SSound>
					SetServoDeg(0);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	f8 db       	rcall	.-2064   	; 0x858 <SetServoDeg>
    1068:	81 2c       	mov	r8, r1
					select_count = 0;
    106a:	91 2c       	mov	r9, r1
    106c:	23 e0       	ldi	r18, 0x03	; 3
				}
				else {
					select_count = select_count;
				}
				// 6번
				if(error_count >= 3) {
    106e:	a2 16       	cp	r10, r18
    1070:	b1 04       	cpc	r11, r1
    1072:	68 f0       	brcs	.+26     	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
    1074:	0d dc       	rcall	.-2022   	; 0x890 <Siren>
					// 비밀번호 3번 이상 틀릴 시
					Siren();
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	80 e0       	ldi	r24, 0x00	; 0
					LCD_pos(0,1); LCD_STR(str_warning);
    107a:	6c d8       	rcall	.-3880   	; 0x154 <LCD_pos>
    107c:	ce 01       	movw	r24, r28
    107e:	c0 96       	adiw	r24, 0x30	; 48
    1080:	5d d8       	rcall	.-3910   	; 0x13c <LCD_STR>
    1082:	62 e0       	ldi	r22, 0x02	; 2
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	66 d8       	rcall	.-3892   	; 0x154 <LCD_pos>
    1088:	ce 01       	movw	r24, r28
					LCD_pos(1,2); LCD_STR(str_theft);
    108a:	cd 96       	adiw	r24, 0x3d	; 61
    108c:	57 d8       	rcall	.-3922   	; 0x13c <LCD_STR>
    108e:	87 2d       	mov	r24, r7
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	55 d9       	rcall	.-3414   	; 0x33e <gen_sound>
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	78 16       	cp	r7, r24
    1098:	09 f4       	brne	.+2      	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
				}
			}
			
			gen_sound(keypad_code);
    109a:	89 cc       	rjmp	.-1774   	; 0x9ae <main+0xec>
    109c:	76 14       	cp	r7, r6
    109e:	09 f4       	brne	.+2      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    10a0:	86 cc       	rjmp	.-1780   	; 0x9ae <main+0xec>
			
			if((keypad_code != 0xFF) && (hkeypad_code != keypad_code)){
    10a2:	c7 01       	movw	r24, r14
    10a4:	68 ee       	ldi	r22, 0xE8	; 232
    10a6:	73 e0       	ldi	r23, 0x03	; 3
    10a8:	10 d0       	rcall	.+32     	; 0x10ca <__divmodhi4>
    10aa:	7c 01       	movw	r14, r24
    10ac:	ee 0c       	add	r14, r14
    10ae:	ff 1c       	adc	r15, r15
				fnd_value %= 1000;
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
				fnd_value *= 10;
    10ba:	99 1f       	adc	r25, r25
    10bc:	e8 0e       	add	r14, r24
    10be:	f9 1e       	adc	r15, r25
    10c0:	87 2d       	mov	r24, r7
    10c2:	a5 da       	rcall	.-2742   	; 0x60e <getNum>
    10c4:	e8 0e       	add	r14, r24
    10c6:	f9 1e       	adc	r15, r25
    10c8:	72 cc       	rjmp	.-1820   	; 0x9ae <main+0xec>

000010ca <__divmodhi4>:
    10ca:	97 fb       	bst	r25, 7
    10cc:	07 2e       	mov	r0, r23
    10ce:	16 f4       	brtc	.+4      	; 0x10d4 <__divmodhi4+0xa>
				fnd_value += getNum(keypad_code);
    10d0:	00 94       	com	r0
    10d2:	06 d0       	rcall	.+12     	; 0x10e0 <__divmodhi4_neg1>
    10d4:	77 fd       	sbrc	r23, 7
    10d6:	08 d0       	rcall	.+16     	; 0x10e8 <__divmodhi4_neg2>
    10d8:	36 d0       	rcall	.+108    	; 0x1146 <__udivmodhi4>
    10da:	07 fc       	sbrc	r0, 7
    10dc:	05 d0       	rcall	.+10     	; 0x10e8 <__divmodhi4_neg2>
    10de:	3e f4       	brtc	.+14     	; 0x10ee <__divmodhi4_exit>

000010e0 <__divmodhi4_neg1>:
    10e0:	90 95       	com	r25
    10e2:	81 95       	neg	r24
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	08 95       	ret

000010e8 <__divmodhi4_neg2>:
    10e8:	70 95       	com	r23
    10ea:	61 95       	neg	r22
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255

000010ee <__divmodhi4_exit>:
    10ee:	08 95       	ret

000010f0 <__divmodsi4>:
    10f0:	05 2e       	mov	r0, r21
    10f2:	97 fb       	bst	r25, 7
    10f4:	16 f4       	brtc	.+4      	; 0x10fa <__divmodsi4+0xa>
    10f6:	00 94       	com	r0
    10f8:	0f d0       	rcall	.+30     	; 0x1118 <__negsi2>
    10fa:	57 fd       	sbrc	r21, 7
    10fc:	05 d0       	rcall	.+10     	; 0x1108 <__divmodsi4_neg2>
    10fe:	37 d0       	rcall	.+110    	; 0x116e <__udivmodsi4>
    1100:	07 fc       	sbrc	r0, 7
    1102:	02 d0       	rcall	.+4      	; 0x1108 <__divmodsi4_neg2>
    1104:	46 f4       	brtc	.+16     	; 0x1116 <__divmodsi4_exit>
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__negsi2>

00001108 <__divmodsi4_neg2>:
    1108:	50 95       	com	r21
    110a:	40 95       	com	r20
    110c:	30 95       	com	r19
    110e:	21 95       	neg	r18
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	4f 4f       	sbci	r20, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255

00001116 <__divmodsi4_exit>:
    1116:	08 95       	ret

00001118 <__negsi2>:
    1118:	90 95       	com	r25
    111a:	80 95       	com	r24
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	08 95       	ret

00001128 <__umulhisi3>:
    1128:	a2 9f       	mul	r26, r18
    112a:	b0 01       	movw	r22, r0
    112c:	b3 9f       	mul	r27, r19
    112e:	c0 01       	movw	r24, r0
    1130:	a3 9f       	mul	r26, r19
    1132:	70 0d       	add	r23, r0
    1134:	81 1d       	adc	r24, r1
    1136:	11 24       	eor	r1, r1
    1138:	91 1d       	adc	r25, r1
    113a:	b2 9f       	mul	r27, r18
    113c:	70 0d       	add	r23, r0
    113e:	81 1d       	adc	r24, r1
    1140:	11 24       	eor	r1, r1
    1142:	91 1d       	adc	r25, r1
    1144:	08 95       	ret

00001146 <__udivmodhi4>:
    1146:	aa 1b       	sub	r26, r26
    1148:	bb 1b       	sub	r27, r27
    114a:	51 e1       	ldi	r21, 0x11	; 17
    114c:	07 c0       	rjmp	.+14     	; 0x115c <__udivmodhi4_ep>

0000114e <__udivmodhi4_loop>:
    114e:	aa 1f       	adc	r26, r26
    1150:	bb 1f       	adc	r27, r27
    1152:	a6 17       	cp	r26, r22
    1154:	b7 07       	cpc	r27, r23
    1156:	10 f0       	brcs	.+4      	; 0x115c <__udivmodhi4_ep>
    1158:	a6 1b       	sub	r26, r22
    115a:	b7 0b       	sbc	r27, r23

0000115c <__udivmodhi4_ep>:
    115c:	88 1f       	adc	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	5a 95       	dec	r21
    1162:	a9 f7       	brne	.-22     	; 0x114e <__udivmodhi4_loop>
    1164:	80 95       	com	r24
    1166:	90 95       	com	r25
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	08 95       	ret

0000116e <__udivmodsi4>:
    116e:	a1 e2       	ldi	r26, 0x21	; 33
    1170:	1a 2e       	mov	r1, r26
    1172:	aa 1b       	sub	r26, r26
    1174:	bb 1b       	sub	r27, r27
    1176:	fd 01       	movw	r30, r26
    1178:	0d c0       	rjmp	.+26     	; 0x1194 <__udivmodsi4_ep>

0000117a <__udivmodsi4_loop>:
    117a:	aa 1f       	adc	r26, r26
    117c:	bb 1f       	adc	r27, r27
    117e:	ee 1f       	adc	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	a2 17       	cp	r26, r18
    1184:	b3 07       	cpc	r27, r19
    1186:	e4 07       	cpc	r30, r20
    1188:	f5 07       	cpc	r31, r21
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__udivmodsi4_ep>
    118c:	a2 1b       	sub	r26, r18
    118e:	b3 0b       	sbc	r27, r19
    1190:	e4 0b       	sbc	r30, r20
    1192:	f5 0b       	sbc	r31, r21

00001194 <__udivmodsi4_ep>:
    1194:	66 1f       	adc	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	1a 94       	dec	r1
    119e:	69 f7       	brne	.-38     	; 0x117a <__udivmodsi4_loop>
    11a0:	60 95       	com	r22
    11a2:	70 95       	com	r23
    11a4:	80 95       	com	r24
    11a6:	90 95       	com	r25
    11a8:	9b 01       	movw	r18, r22
    11aa:	ac 01       	movw	r20, r24
    11ac:	bd 01       	movw	r22, r26
    11ae:	cf 01       	movw	r24, r30
    11b0:	08 95       	ret

000011b2 <_exit>:
    11b2:	f8 94       	cli

000011b4 <__stop_program>:
    11b4:	ff cf       	rjmp	.-2      	; 0x11b4 <__stop_program>
